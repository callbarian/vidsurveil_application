// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe/proto/caffe_pretty_print.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "caffe/proto/caffe.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto;
namespace caffe {
class NetParameterPrettyPrint;
class NetParameterPrettyPrintDefaultTypeInternal;
extern NetParameterPrettyPrintDefaultTypeInternal _NetParameterPrettyPrint_default_instance_;
}  // namespace caffe
PROTOBUF_NAMESPACE_OPEN
template<> ::caffe::NetParameterPrettyPrint* Arena::CreateMaybeMessage<::caffe::NetParameterPrettyPrint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace caffe {

// ===================================================================

class NetParameterPrettyPrint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameterPrettyPrint) */ {
 public:
  NetParameterPrettyPrint();
  virtual ~NetParameterPrettyPrint();

  NetParameterPrettyPrint(const NetParameterPrettyPrint& from);
  NetParameterPrettyPrint(NetParameterPrettyPrint&& from) noexcept
    : NetParameterPrettyPrint() {
    *this = ::std::move(from);
  }

  inline NetParameterPrettyPrint& operator=(const NetParameterPrettyPrint& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameterPrettyPrint& operator=(NetParameterPrettyPrint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetParameterPrettyPrint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameterPrettyPrint* internal_default_instance() {
    return reinterpret_cast<const NetParameterPrettyPrint*>(
               &_NetParameterPrettyPrint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetParameterPrettyPrint& a, NetParameterPrettyPrint& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameterPrettyPrint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetParameterPrettyPrint* New() const final {
    return CreateMaybeMessage<NetParameterPrettyPrint>(nullptr);
  }

  NetParameterPrettyPrint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetParameterPrettyPrint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetParameterPrettyPrint& from);
  void MergeFrom(const NetParameterPrettyPrint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameterPrettyPrint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.NetParameterPrettyPrint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 3,
    kInputDimFieldNumber = 4,
    kLayersFieldNumber = 5,
    kNameFieldNumber = 1,
    kForceBackwardFieldNumber = 2,
  };
  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  private:
  int _internal_input_dim_size() const;
  public:
  void clear_input_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_dim() const;
  void _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_dim(int index) const;
  void set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_dim();

  // repeated .caffe.LayerParameter layers = 5;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::caffe::LayerParameter* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layers();
  private:
  const ::caffe::LayerParameter& _internal_layers(int index) const;
  ::caffe::LayerParameter* _internal_add_layers();
  public:
  const ::caffe::LayerParameter& layers(int index) const;
  ::caffe::LayerParameter* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >&
      layers() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool force_backward = 2 [default = false];
  bool has_force_backward() const;
  private:
  bool _internal_has_force_backward() const;
  public:
  void clear_force_backward();
  bool force_backward() const;
  void set_force_backward(bool value);
  private:
  bool _internal_force_backward() const;
  void _internal_set_force_backward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.NetParameterPrettyPrint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_dim_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter > layers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool force_backward_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetParameterPrettyPrint

// optional string name = 1;
inline bool NetParameterPrettyPrint::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetParameterPrettyPrint::has_name() const {
  return _internal_has_name();
}
inline void NetParameterPrettyPrint::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameterPrettyPrint::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameterPrettyPrint.name)
  return _internal_name();
}
inline void NetParameterPrettyPrint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameterPrettyPrint.name)
}
inline std::string* NetParameterPrettyPrint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameterPrettyPrint.name)
  return _internal_mutable_name();
}
inline const std::string& NetParameterPrettyPrint::_internal_name() const {
  return name_.GetNoArena();
}
inline void NetParameterPrettyPrint::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetParameterPrettyPrint::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameterPrettyPrint.name)
}
inline void NetParameterPrettyPrint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameterPrettyPrint.name)
}
inline void NetParameterPrettyPrint::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameterPrettyPrint.name)
}
inline std::string* NetParameterPrettyPrint::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetParameterPrettyPrint::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameterPrettyPrint.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameterPrettyPrint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameterPrettyPrint.name)
}

// optional bool force_backward = 2 [default = false];
inline bool NetParameterPrettyPrint::_internal_has_force_backward() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetParameterPrettyPrint::has_force_backward() const {
  return _internal_has_force_backward();
}
inline void NetParameterPrettyPrint::clear_force_backward() {
  force_backward_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NetParameterPrettyPrint::_internal_force_backward() const {
  return force_backward_;
}
inline bool NetParameterPrettyPrint::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameterPrettyPrint.force_backward)
  return _internal_force_backward();
}
inline void NetParameterPrettyPrint::_internal_set_force_backward(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_backward_ = value;
}
inline void NetParameterPrettyPrint::set_force_backward(bool value) {
  _internal_set_force_backward(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameterPrettyPrint.force_backward)
}

// repeated string input = 3;
inline int NetParameterPrettyPrint::_internal_input_size() const {
  return input_.size();
}
inline int NetParameterPrettyPrint::input_size() const {
  return _internal_input_size();
}
inline void NetParameterPrettyPrint::clear_input() {
  input_.Clear();
}
inline std::string* NetParameterPrettyPrint::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameterPrettyPrint.input)
  return _internal_add_input();
}
inline const std::string& NetParameterPrettyPrint::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& NetParameterPrettyPrint::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameterPrettyPrint.input)
  return _internal_input(index);
}
inline std::string* NetParameterPrettyPrint::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameterPrettyPrint.input)
  return input_.Mutable(index);
}
inline void NetParameterPrettyPrint::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameterPrettyPrint.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameterPrettyPrint::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameterPrettyPrint.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void NetParameterPrettyPrint::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameterPrettyPrint.input)
}
inline void NetParameterPrettyPrint::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameterPrettyPrint.input)
}
inline std::string* NetParameterPrettyPrint::_internal_add_input() {
  return input_.Add();
}
inline void NetParameterPrettyPrint::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameterPrettyPrint.input)
}
inline void NetParameterPrettyPrint::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameterPrettyPrint.input)
}
inline void NetParameterPrettyPrint::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameterPrettyPrint.input)
}
inline void NetParameterPrettyPrint::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameterPrettyPrint.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetParameterPrettyPrint::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameterPrettyPrint.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetParameterPrettyPrint::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameterPrettyPrint.input)
  return &input_;
}

// repeated int32 input_dim = 4;
inline int NetParameterPrettyPrint::_internal_input_dim_size() const {
  return input_dim_.size();
}
inline int NetParameterPrettyPrint::input_dim_size() const {
  return _internal_input_dim_size();
}
inline void NetParameterPrettyPrint::clear_input_dim() {
  input_dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameterPrettyPrint::_internal_input_dim(int index) const {
  return input_dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameterPrettyPrint::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameterPrettyPrint.input_dim)
  return _internal_input_dim(index);
}
inline void NetParameterPrettyPrint::set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameterPrettyPrint.input_dim)
}
inline void NetParameterPrettyPrint::_internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Add(value);
}
inline void NetParameterPrettyPrint::add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_dim(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameterPrettyPrint.input_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameterPrettyPrint::_internal_input_dim() const {
  return input_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameterPrettyPrint::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameterPrettyPrint.input_dim)
  return _internal_input_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameterPrettyPrint::_internal_mutable_input_dim() {
  return &input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameterPrettyPrint::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameterPrettyPrint.input_dim)
  return _internal_mutable_input_dim();
}

// repeated .caffe.LayerParameter layers = 5;
inline int NetParameterPrettyPrint::_internal_layers_size() const {
  return layers_.size();
}
inline int NetParameterPrettyPrint::layers_size() const {
  return _internal_layers_size();
}
inline ::caffe::LayerParameter* NetParameterPrettyPrint::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameterPrettyPrint.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameterPrettyPrint::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameterPrettyPrint.layers)
  return &layers_;
}
inline const ::caffe::LayerParameter& NetParameterPrettyPrint::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::caffe::LayerParameter& NetParameterPrettyPrint::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameterPrettyPrint.layers)
  return _internal_layers(index);
}
inline ::caffe::LayerParameter* NetParameterPrettyPrint::_internal_add_layers() {
  return layers_.Add();
}
inline ::caffe::LayerParameter* NetParameterPrettyPrint::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameterPrettyPrint.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameterPrettyPrint::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameterPrettyPrint.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto
