// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe/proto/caffe_pretty_print.proto

#include "caffe/proto/caffe_pretty_print.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_caffe_2fproto_2fcaffe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_LayerParameter_caffe_2fproto_2fcaffe_2eproto;
namespace caffe {
class NetParameterPrettyPrintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetParameterPrettyPrint> _instance;
} _NetParameterPrettyPrint_default_instance_;
}  // namespace caffe
static void InitDefaultsscc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe::_NetParameterPrettyPrint_default_instance_;
    new (ptr) ::caffe::NetParameterPrettyPrint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe::NetParameterPrettyPrint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto}, {
      &scc_info_LayerParameter_caffe_2fproto_2fcaffe_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, name_),
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, force_backward_),
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, input_),
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, input_dim_),
  PROTOBUF_FIELD_OFFSET(::caffe::NetParameterPrettyPrint, layers_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::caffe::NetParameterPrettyPrint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::caffe::_NetParameterPrettyPrint_default_instance_),
};

const char descriptor_table_protodef_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$caffe/proto/caffe_pretty_print.proto\022\005"
  "caffe\032\027caffe/proto/caffe.proto\"\217\001\n\027NetPa"
  "rameterPrettyPrint\022\014\n\004name\030\001 \001(\t\022\035\n\016forc"
  "e_backward\030\002 \001(\010:\005false\022\r\n\005input\030\003 \003(\t\022\021"
  "\n\tinput_dim\030\004 \003(\005\022%\n\006layers\030\005 \003(\0132\025.caff"
  "e.LayerParameter"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_deps[1] = {
  &::descriptor_table_caffe_2fproto_2fcaffe_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_sccs[1] = {
  &scc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_once;
static bool descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto = {
  &descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_initialized, descriptor_table_protodef_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto, "caffe/proto/caffe_pretty_print.proto", 216,
  &descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_once, descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_sccs, descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto::offsets,
  file_level_metadata_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto, 1, file_level_enum_descriptors_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto, file_level_service_descriptors_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto), true);
namespace caffe {

// ===================================================================

void NetParameterPrettyPrint::InitAsDefaultInstance() {
}
class NetParameterPrettyPrint::_Internal {
 public:
  using HasBits = decltype(std::declval<NetParameterPrettyPrint>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_backward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void NetParameterPrettyPrint::clear_layers() {
  layers_.Clear();
}
NetParameterPrettyPrint::NetParameterPrettyPrint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameterPrettyPrint)
}
NetParameterPrettyPrint::NetParameterPrettyPrint(const NetParameterPrettyPrint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_(from.input_),
      input_dim_(from.input_dim_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  force_backward_ = from.force_backward_;
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameterPrettyPrint)
}

void NetParameterPrettyPrint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  force_backward_ = false;
}

NetParameterPrettyPrint::~NetParameterPrettyPrint() {
  // @@protoc_insertion_point(destructor:caffe.NetParameterPrettyPrint)
  SharedDtor();
}

void NetParameterPrettyPrint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetParameterPrettyPrint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetParameterPrettyPrint& NetParameterPrettyPrint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetParameterPrettyPrint_caffe_2fproto_2fcaffe_5fpretty_5fprint_2eproto.base);
  return *internal_default_instance();
}


void NetParameterPrettyPrint::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameterPrettyPrint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  input_dim_.Clear();
  layers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  force_backward_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetParameterPrettyPrint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "caffe.NetParameterPrettyPrint.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_backward = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_force_backward(&has_bits);
          force_backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "caffe.NetParameterPrettyPrint.input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 input_dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_dim(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .caffe.LayerParameter layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetParameterPrettyPrint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameterPrettyPrint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "caffe.NetParameterPrettyPrint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool force_backward = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_backward(), target);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "caffe.NetParameterPrettyPrint.input");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0, n = this->_internal_input_dim_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_dim(i), target);
  }

  // repeated .caffe.LayerParameter layers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameterPrettyPrint)
  return target;
}

size_t NetParameterPrettyPrint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameterPrettyPrint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_dim_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_dim_size());
    total_size += data_size;
  }

  // repeated .caffe.LayerParameter layers = 5;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool force_backward = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetParameterPrettyPrint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameterPrettyPrint)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameterPrettyPrint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetParameterPrettyPrint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameterPrettyPrint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameterPrettyPrint)
    MergeFrom(*source);
  }
}

void NetParameterPrettyPrint::MergeFrom(const NetParameterPrettyPrint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameterPrettyPrint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  layers_.MergeFrom(from.layers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      force_backward_ = from.force_backward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetParameterPrettyPrint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameterPrettyPrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameterPrettyPrint::CopyFrom(const NetParameterPrettyPrint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameterPrettyPrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameterPrettyPrint::IsInitialized() const {
  return true;
}

void NetParameterPrettyPrint::InternalSwap(NetParameterPrettyPrint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_.InternalSwap(&other->input_);
  input_dim_.InternalSwap(&other->input_dim_);
  layers_.InternalSwap(&other->layers_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(force_backward_, other->force_backward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParameterPrettyPrint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::caffe::NetParameterPrettyPrint* Arena::CreateMaybeMessage< ::caffe::NetParameterPrettyPrint >(Arena* arena) {
  return Arena::CreateInternal< ::caffe::NetParameterPrettyPrint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
