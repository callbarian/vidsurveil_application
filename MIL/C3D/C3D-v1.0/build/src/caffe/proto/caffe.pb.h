// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe/proto/caffe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_caffe_2fproto_2fcaffe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_caffe_2fproto_2fcaffe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe_2fproto_2fcaffe_2eproto;
namespace caffe {
class AggregationParameter;
class AggregationParameterDefaultTypeInternal;
extern AggregationParameterDefaultTypeInternal _AggregationParameter_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
class BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class ConcatParameter;
class ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class DataParameter;
class DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DownSamplingParameter;
class DownSamplingParameterDefaultTypeInternal;
extern DownSamplingParameterDefaultTypeInternal _DownSamplingParameter_default_instance_;
class DropoutParameter;
class DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class HDF5DataParameter;
class HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
class HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class ImageDataParameter;
class ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfogainLossParameter;
class InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
class InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class LRNParameter;
class LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
class PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class SolverParameter;
class SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class V0LayerParameter;
class V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class VolumeDatum;
class VolumeDatumDefaultTypeInternal;
extern VolumeDatumDefaultTypeInternal _VolumeDatum_default_instance_;
class WindowDataParameter;
class WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace caffe
PROTOBUF_NAMESPACE_OPEN
template<> ::caffe::AggregationParameter* Arena::CreateMaybeMessage<::caffe::AggregationParameter>(Arena*);
template<> ::caffe::BlobProto* Arena::CreateMaybeMessage<::caffe::BlobProto>(Arena*);
template<> ::caffe::BlobProtoVector* Arena::CreateMaybeMessage<::caffe::BlobProtoVector>(Arena*);
template<> ::caffe::ConcatParameter* Arena::CreateMaybeMessage<::caffe::ConcatParameter>(Arena*);
template<> ::caffe::ConvolutionParameter* Arena::CreateMaybeMessage<::caffe::ConvolutionParameter>(Arena*);
template<> ::caffe::DataParameter* Arena::CreateMaybeMessage<::caffe::DataParameter>(Arena*);
template<> ::caffe::Datum* Arena::CreateMaybeMessage<::caffe::Datum>(Arena*);
template<> ::caffe::DownSamplingParameter* Arena::CreateMaybeMessage<::caffe::DownSamplingParameter>(Arena*);
template<> ::caffe::DropoutParameter* Arena::CreateMaybeMessage<::caffe::DropoutParameter>(Arena*);
template<> ::caffe::FillerParameter* Arena::CreateMaybeMessage<::caffe::FillerParameter>(Arena*);
template<> ::caffe::HDF5DataParameter* Arena::CreateMaybeMessage<::caffe::HDF5DataParameter>(Arena*);
template<> ::caffe::HDF5OutputParameter* Arena::CreateMaybeMessage<::caffe::HDF5OutputParameter>(Arena*);
template<> ::caffe::ImageDataParameter* Arena::CreateMaybeMessage<::caffe::ImageDataParameter>(Arena*);
template<> ::caffe::InfogainLossParameter* Arena::CreateMaybeMessage<::caffe::InfogainLossParameter>(Arena*);
template<> ::caffe::InnerProductParameter* Arena::CreateMaybeMessage<::caffe::InnerProductParameter>(Arena*);
template<> ::caffe::LRNParameter* Arena::CreateMaybeMessage<::caffe::LRNParameter>(Arena*);
template<> ::caffe::LayerParameter* Arena::CreateMaybeMessage<::caffe::LayerParameter>(Arena*);
template<> ::caffe::MemoryDataParameter* Arena::CreateMaybeMessage<::caffe::MemoryDataParameter>(Arena*);
template<> ::caffe::NetParameter* Arena::CreateMaybeMessage<::caffe::NetParameter>(Arena*);
template<> ::caffe::PoolingParameter* Arena::CreateMaybeMessage<::caffe::PoolingParameter>(Arena*);
template<> ::caffe::PowerParameter* Arena::CreateMaybeMessage<::caffe::PowerParameter>(Arena*);
template<> ::caffe::SolverParameter* Arena::CreateMaybeMessage<::caffe::SolverParameter>(Arena*);
template<> ::caffe::SolverState* Arena::CreateMaybeMessage<::caffe::SolverState>(Arena*);
template<> ::caffe::V0LayerParameter* Arena::CreateMaybeMessage<::caffe::V0LayerParameter>(Arena*);
template<> ::caffe::VolumeDatum* Arena::CreateMaybeMessage<::caffe::VolumeDatum>(Arena*);
template<> ::caffe::WindowDataParameter* Arena::CreateMaybeMessage<::caffe::WindowDataParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace caffe {

enum SolverParameter_SolverMode : int {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
constexpr int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverMode_descriptor();
template<typename T>
inline const std::string& SolverParameter_SolverMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolverParameter_SolverMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolverParameter_SolverMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), enum_t_value);
}
inline bool SolverParameter_SolverMode_Parse(
    const std::string& name, SolverParameter_SolverMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum LayerParameter_LayerType : int {
  LayerParameter_LayerType_NONE = 0,
  LayerParameter_LayerType_ACCURACY = 1,
  LayerParameter_LayerType_BNLL = 2,
  LayerParameter_LayerType_CONCAT = 3,
  LayerParameter_LayerType_CONVOLUTION = 4,
  LayerParameter_LayerType_DATA = 5,
  LayerParameter_LayerType_DROPOUT = 6,
  LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  LayerParameter_LayerType_ELTWISE_PRODUCT = 25,
  LayerParameter_LayerType_FLATTEN = 8,
  LayerParameter_LayerType_HDF5_DATA = 9,
  LayerParameter_LayerType_HDF5_OUTPUT = 10,
  LayerParameter_LayerType_HINGE_LOSS = 28,
  LayerParameter_LayerType_IM2COL = 11,
  LayerParameter_LayerType_IMAGE_DATA = 12,
  LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  LayerParameter_LayerType_INNER_PRODUCT = 14,
  LayerParameter_LayerType_LRN = 15,
  LayerParameter_LayerType_MEMORY_DATA = 29,
  LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  LayerParameter_LayerType_POOLING = 17,
  LayerParameter_LayerType_POWER = 26,
  LayerParameter_LayerType_RELU = 18,
  LayerParameter_LayerType_SIGMOID = 19,
  LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  LayerParameter_LayerType_SOFTMAX = 20,
  LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  LayerParameter_LayerType_SPLIT = 22,
  LayerParameter_LayerType_TANH = 23,
  LayerParameter_LayerType_WINDOW_DATA = 24,
  LayerParameter_LayerType_CONVOLUTION3D = 30,
  LayerParameter_LayerType_POOLING3D = 31,
  LayerParameter_LayerType_VOLUME_DATA = 32,
  LayerParameter_LayerType_VIDEO_DATA = 33,
  LayerParameter_LayerType_DECONVOLUTION3D = 34,
  LayerParameter_LayerType_VIDEO_SEGMENTATION_DATA = 35,
  LayerParameter_LayerType_VOXEL_SOFTMAX = 36,
  LayerParameter_LayerType_VOXEL_SOFTMAX_LOSS = 37,
  LayerParameter_LayerType_VIDEO_WITH_VOXEL_TRUTH_DATA = 38,
  LayerParameter_LayerType_VOXEL_CUSTOM_LOSS = 39,
  LayerParameter_LayerType_DOWN_SAMPLING = 40
};
bool LayerParameter_LayerType_IsValid(int value);
constexpr LayerParameter_LayerType LayerParameter_LayerType_LayerType_MIN = LayerParameter_LayerType_NONE;
constexpr LayerParameter_LayerType LayerParameter_LayerType_LayerType_MAX = LayerParameter_LayerType_DOWN_SAMPLING;
constexpr int LayerParameter_LayerType_LayerType_ARRAYSIZE = LayerParameter_LayerType_LayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayerParameter_LayerType_descriptor();
template<typename T>
inline const std::string& LayerParameter_LayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerParameter_LayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerParameter_LayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LayerParameter_LayerType_descriptor(), enum_t_value);
}
inline bool LayerParameter_LayerType_Parse(
    const std::string& name, LayerParameter_LayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LayerParameter_LayerType>(
    LayerParameter_LayerType_descriptor(), name, value);
}
enum DownSamplingParameter_DownSamplingType : int {
  DownSamplingParameter_DownSamplingType_NONE = 0,
  DownSamplingParameter_DownSamplingType_VOTE = 1,
  DownSamplingParameter_DownSamplingType_AVERAGE = 2
};
bool DownSamplingParameter_DownSamplingType_IsValid(int value);
constexpr DownSamplingParameter_DownSamplingType DownSamplingParameter_DownSamplingType_DownSamplingType_MIN = DownSamplingParameter_DownSamplingType_NONE;
constexpr DownSamplingParameter_DownSamplingType DownSamplingParameter_DownSamplingType_DownSamplingType_MAX = DownSamplingParameter_DownSamplingType_AVERAGE;
constexpr int DownSamplingParameter_DownSamplingType_DownSamplingType_ARRAYSIZE = DownSamplingParameter_DownSamplingType_DownSamplingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownSamplingParameter_DownSamplingType_descriptor();
template<typename T>
inline const std::string& DownSamplingParameter_DownSamplingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownSamplingParameter_DownSamplingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownSamplingParameter_DownSamplingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DownSamplingParameter_DownSamplingType_descriptor(), enum_t_value);
}
inline bool DownSamplingParameter_DownSamplingType_Parse(
    const std::string& name, DownSamplingParameter_DownSamplingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DownSamplingParameter_DownSamplingType>(
    DownSamplingParameter_DownSamplingType_descriptor(), name, value);
}
enum LRNParameter_NormRegion : int {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
constexpr int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor();
template<typename T>
inline const std::string& LRNParameter_NormRegion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LRNParameter_NormRegion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LRNParameter_NormRegion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), enum_t_value);
}
inline bool LRNParameter_NormRegion_Parse(
    const std::string& name, LRNParameter_NormRegion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod : int {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
constexpr int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& PoolingParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const std::string& name, PoolingParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod : int {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
constexpr int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& V0LayerParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V0LayerParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V0LayerParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
// ===================================================================

class BlobProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobProto* New() const final {
    return CreateMaybeMessage<BlobProto>(nullptr);
  }

  BlobProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.BlobProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kDiffFieldNumber = 7,
    kNumFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kLengthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
  };
  // repeated float data = 6 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 7 [packed = true];
  int diff_size() const;
  private:
  int _internal_diff_size() const;
  public:
  void clear_diff();
  private:
  float _internal_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_diff() const;
  void _internal_add_diff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_diff();
  public:
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_diff();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 length = 3 [default = 0];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 4 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 5 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > diff_;
  mutable std::atomic<int> _diff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class BlobProtoVector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);
  BlobProtoVector(BlobProtoVector&& from) noexcept
    : BlobProtoVector() {
    *this = ::std::move(from);
  }

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProtoVector& operator=(BlobProtoVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobProtoVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlobProtoVector& a, BlobProtoVector& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProtoVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const final {
    return CreateMaybeMessage<BlobProtoVector>(nullptr);
  }

  BlobProtoVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobProtoVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProtoVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.BlobProtoVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 1,
  };
  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::caffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::caffe::BlobProto& _internal_blobs(int index) const;
  ::caffe::BlobProto* _internal_add_blobs();
  public:
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class VolumeDatum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.VolumeDatum) */ {
 public:
  VolumeDatum();
  virtual ~VolumeDatum();

  VolumeDatum(const VolumeDatum& from);
  VolumeDatum(VolumeDatum&& from) noexcept
    : VolumeDatum() {
    *this = ::std::move(from);
  }

  inline VolumeDatum& operator=(const VolumeDatum& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeDatum& operator=(VolumeDatum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeDatum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VolumeDatum* internal_default_instance() {
    return reinterpret_cast<const VolumeDatum*>(
               &_VolumeDatum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VolumeDatum& a, VolumeDatum& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeDatum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeDatum* New() const final {
    return CreateMaybeMessage<VolumeDatum>(nullptr);
  }

  VolumeDatum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeDatum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeDatum& from);
  void MergeFrom(const VolumeDatum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeDatum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.VolumeDatum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 7,
    kDataFieldNumber = 5,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kLabelFieldNumber = 6,
    kLengthFieldNumber = 2,
  };
  // repeated float float_data = 7;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 channels = 1;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 label = 6;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 length = 2 [default = 1];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.VolumeDatum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class Datum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Datum& operator=(Datum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Datum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }
  inline void Swap(Datum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Datum* New() const final {
    return CreateMaybeMessage<Datum>(nullptr);
  }

  Datum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.Datum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 6,
    kDataFieldNumber = 4,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kLabelFieldNumber = 5,
  };
  // repeated float float_data = 6;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 channels = 1;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class FillerParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FillerParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const final {
    return CreateMaybeMessage<FillerParameter>(nullptr);
  }

  FillerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FillerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FillerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.FillerParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kMinFieldNumber = 3,
    kMeanFieldNumber = 5,
    kSparseFieldNumber = 7,
    kMaxFieldNumber = 4,
    kStdFieldNumber = 6,
  };
  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float value = 2 [default = 0];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // optional float min = 3 [default = 0];
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  ::PROTOBUF_NAMESPACE_ID::int32 sparse() const;
  void set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sparse() const;
  void _internal_set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float max = 4 [default = 1];
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // optional float std = 6 [default = 1];
  bool has_std() const;
  private:
  bool _internal_has_std() const;
  public:
  void clear_std();
  float std() const;
  void set_std(float value);
  private:
  float _internal_std() const;
  void _internal_set_std(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  ::PROTOBUF_NAMESPACE_ID::int32 sparse_;
  float max_;
  float std_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class NetParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetParameter* New() const final {
    return CreateMaybeMessage<NetParameter>(nullptr);
  }

  NetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.NetParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kInputFieldNumber = 3,
    kInputDimFieldNumber = 4,
    kNameFieldNumber = 1,
    kForceBackwardFieldNumber = 5,
  };
  // repeated .caffe.LayerParameter layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::caffe::LayerParameter* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layers();
  private:
  const ::caffe::LayerParameter& _internal_layers(int index) const;
  ::caffe::LayerParameter* _internal_add_layers();
  public:
  const ::caffe::LayerParameter& layers(int index) const;
  ::caffe::LayerParameter* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  private:
  int _internal_input_dim_size() const;
  public:
  void clear_input_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_dim() const;
  void _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_dim(int index) const;
  void set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_dim();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  private:
  bool _internal_has_force_backward() const;
  public:
  void clear_force_backward();
  bool force_backward() const;
  void set_force_backward(bool value);
  private:
  bool _internal_force_backward() const;
  void _internal_set_force_backward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter > layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_dim_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool force_backward_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class SolverParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);
  SolverParameter(SolverParameter&& from) noexcept
    : SolverParameter() {
    *this = ::std::move(from);
  }

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverParameter& operator=(SolverParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SolverParameter& a, SolverParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const final {
    return CreateMaybeMessage<SolverParameter>(nullptr);
  }

  SolverParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.SolverParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SolverParameter_SolverMode SolverMode;
  static constexpr SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static constexpr SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static constexpr SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static constexpr SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static constexpr int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SolverMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SolverMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SolverMode_Name.");
    return SolverParameter_SolverMode_Name(enum_t_value);
  }
  static inline bool SolverMode_Parse(const std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrainNetFieldNumber = 1,
    kTestNetFieldNumber = 2,
    kLrPolicyFieldNumber = 8,
    kSnapshotPrefixFieldNumber = 15,
    kTestIterFieldNumber = 3,
    kTestIntervalFieldNumber = 4,
    kBaseLrFieldNumber = 5,
    kDisplayFieldNumber = 6,
    kMaxIterFieldNumber = 7,
    kGammaFieldNumber = 9,
    kPowerFieldNumber = 10,
    kMomentumFieldNumber = 11,
    kWeightDecayFieldNumber = 12,
    kStepsizeFieldNumber = 13,
    kSnapshotFieldNumber = 14,
    kTestComputeLossFieldNumber = 19,
    kSnapshotDiffFieldNumber = 16,
    kDeviceIdFieldNumber = 18,
    kSolverModeFieldNumber = 17,
    kRandomSeedFieldNumber = 20,
  };
  // optional string train_net = 1;
  bool has_train_net() const;
  private:
  bool _internal_has_train_net() const;
  public:
  void clear_train_net();
  const std::string& train_net() const;
  void set_train_net(const std::string& value);
  void set_train_net(std::string&& value);
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  std::string* mutable_train_net();
  std::string* release_train_net();
  void set_allocated_train_net(std::string* train_net);
  private:
  const std::string& _internal_train_net() const;
  void _internal_set_train_net(const std::string& value);
  std::string* _internal_mutable_train_net();
  public:

  // optional string test_net = 2;
  bool has_test_net() const;
  private:
  bool _internal_has_test_net() const;
  public:
  void clear_test_net();
  const std::string& test_net() const;
  void set_test_net(const std::string& value);
  void set_test_net(std::string&& value);
  void set_test_net(const char* value);
  void set_test_net(const char* value, size_t size);
  std::string* mutable_test_net();
  std::string* release_test_net();
  void set_allocated_test_net(std::string* test_net);
  private:
  const std::string& _internal_test_net() const;
  void _internal_set_test_net(const std::string& value);
  std::string* _internal_mutable_test_net();
  public:

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  private:
  bool _internal_has_lr_policy() const;
  public:
  void clear_lr_policy();
  const std::string& lr_policy() const;
  void set_lr_policy(const std::string& value);
  void set_lr_policy(std::string&& value);
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  std::string* mutable_lr_policy();
  std::string* release_lr_policy();
  void set_allocated_lr_policy(std::string* lr_policy);
  private:
  const std::string& _internal_lr_policy() const;
  void _internal_set_lr_policy(const std::string& value);
  std::string* _internal_mutable_lr_policy();
  public:

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  private:
  bool _internal_has_snapshot_prefix() const;
  public:
  void clear_snapshot_prefix();
  const std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const std::string& value);
  void set_snapshot_prefix(std::string&& value);
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  std::string* mutable_snapshot_prefix();
  std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(std::string* snapshot_prefix);
  private:
  const std::string& _internal_snapshot_prefix() const;
  void _internal_set_snapshot_prefix(const std::string& value);
  std::string* _internal_mutable_snapshot_prefix();
  public:

  // optional int32 test_iter = 3 [default = 0];
  bool has_test_iter() const;
  private:
  bool _internal_has_test_iter() const;
  public:
  void clear_test_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 test_iter() const;
  void set_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_iter() const;
  void _internal_set_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  private:
  bool _internal_has_test_interval() const;
  public:
  void clear_test_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 test_interval() const;
  void set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_interval() const;
  void _internal_set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float base_lr = 5;
  bool has_base_lr() const;
  private:
  bool _internal_has_base_lr() const;
  public:
  void clear_base_lr();
  float base_lr() const;
  void set_base_lr(float value);
  private:
  float _internal_base_lr() const;
  void _internal_set_base_lr(float value);
  public:

  // optional int32 display = 6;
  bool has_display() const;
  private:
  bool _internal_has_display() const;
  public:
  void clear_display();
  ::PROTOBUF_NAMESPACE_ID::int32 display() const;
  void set_display(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display() const;
  void _internal_set_display(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  private:
  bool _internal_has_max_iter() const;
  public:
  void clear_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter() const;
  void set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iter() const;
  void _internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float gamma = 9;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  float gamma() const;
  void set_gamma(float value);
  private:
  float _internal_gamma() const;
  void _internal_set_gamma(float value);
  public:

  // optional float power = 10;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // optional float momentum = 11;
  bool has_momentum() const;
  private:
  bool _internal_has_momentum() const;
  public:
  void clear_momentum();
  float momentum() const;
  void set_momentum(float value);
  private:
  float _internal_momentum() const;
  void _internal_set_momentum(float value);
  public:

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  private:
  bool _internal_has_weight_decay() const;
  public:
  void clear_weight_decay();
  float weight_decay() const;
  void set_weight_decay(float value);
  private:
  float _internal_weight_decay() const;
  void _internal_set_weight_decay(float value);
  public:

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  private:
  bool _internal_has_stepsize() const;
  public:
  void clear_stepsize();
  ::PROTOBUF_NAMESPACE_ID::int32 stepsize() const;
  void set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stepsize() const;
  void _internal_set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  ::PROTOBUF_NAMESPACE_ID::int32 snapshot() const;
  void set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snapshot() const;
  void _internal_set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  private:
  bool _internal_has_test_compute_loss() const;
  public:
  void clear_test_compute_loss();
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);
  private:
  bool _internal_test_compute_loss() const;
  void _internal_set_test_compute_loss(bool value);
  public:

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  private:
  bool _internal_has_snapshot_diff() const;
  public:
  void clear_snapshot_diff();
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);
  private:
  bool _internal_snapshot_diff() const;
  void _internal_set_snapshot_diff(bool value);
  public:

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  private:
  bool _internal_has_solver_mode() const;
  public:
  void clear_solver_mode();
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);
  private:
  ::caffe::SolverParameter_SolverMode _internal_solver_mode() const;
  void _internal_set_solver_mode(::caffe::SolverParameter_SolverMode value);
  public:

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr train_net_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_net_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lr_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_prefix_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_iter_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_interval_;
  float base_lr_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::int32 stepsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 snapshot_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_id_;
  int solver_mode_;
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class SolverState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);
  SolverState(SolverState&& from) noexcept
    : SolverState() {
    *this = ::std::move(from);
  }

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverState& operator=(SolverState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SolverState& a, SolverState& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverState* New() const final {
    return CreateMaybeMessage<SolverState>(nullptr);
  }

  SolverState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.SolverState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 3,
    kLearnedNetFieldNumber = 2,
    kIterFieldNumber = 1,
  };
  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::caffe::BlobProto* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  private:
  const ::caffe::BlobProto& _internal_history(int index) const;
  ::caffe::BlobProto* _internal_add_history();
  public:
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional string learned_net = 2;
  bool has_learned_net() const;
  private:
  bool _internal_has_learned_net() const;
  public:
  void clear_learned_net();
  const std::string& learned_net() const;
  void set_learned_net(const std::string& value);
  void set_learned_net(std::string&& value);
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  std::string* mutable_learned_net();
  std::string* release_learned_net();
  void set_allocated_learned_net(std::string* learned_net);
  private:
  const std::string& _internal_learned_net() const;
  void _internal_set_learned_net(const std::string& value);
  std::string* _internal_mutable_learned_net();
  public:

  // optional int32 iter = 1;
  bool has_iter() const;
  private:
  bool _internal_has_iter() const;
  public:
  void clear_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 iter() const;
  void set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iter() const;
  void _internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto > history_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr learned_net_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class LayerParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const final {
    return CreateMaybeMessage<LayerParameter>(nullptr);
  }

  LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.LayerParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LayerParameter_LayerType LayerType;
  static constexpr LayerType NONE =
    LayerParameter_LayerType_NONE;
  static constexpr LayerType ACCURACY =
    LayerParameter_LayerType_ACCURACY;
  static constexpr LayerType BNLL =
    LayerParameter_LayerType_BNLL;
  static constexpr LayerType CONCAT =
    LayerParameter_LayerType_CONCAT;
  static constexpr LayerType CONVOLUTION =
    LayerParameter_LayerType_CONVOLUTION;
  static constexpr LayerType DATA =
    LayerParameter_LayerType_DATA;
  static constexpr LayerType DROPOUT =
    LayerParameter_LayerType_DROPOUT;
  static constexpr LayerType EUCLIDEAN_LOSS =
    LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static constexpr LayerType ELTWISE_PRODUCT =
    LayerParameter_LayerType_ELTWISE_PRODUCT;
  static constexpr LayerType FLATTEN =
    LayerParameter_LayerType_FLATTEN;
  static constexpr LayerType HDF5_DATA =
    LayerParameter_LayerType_HDF5_DATA;
  static constexpr LayerType HDF5_OUTPUT =
    LayerParameter_LayerType_HDF5_OUTPUT;
  static constexpr LayerType HINGE_LOSS =
    LayerParameter_LayerType_HINGE_LOSS;
  static constexpr LayerType IM2COL =
    LayerParameter_LayerType_IM2COL;
  static constexpr LayerType IMAGE_DATA =
    LayerParameter_LayerType_IMAGE_DATA;
  static constexpr LayerType INFOGAIN_LOSS =
    LayerParameter_LayerType_INFOGAIN_LOSS;
  static constexpr LayerType INNER_PRODUCT =
    LayerParameter_LayerType_INNER_PRODUCT;
  static constexpr LayerType LRN =
    LayerParameter_LayerType_LRN;
  static constexpr LayerType MEMORY_DATA =
    LayerParameter_LayerType_MEMORY_DATA;
  static constexpr LayerType MULTINOMIAL_LOGISTIC_LOSS =
    LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static constexpr LayerType POOLING =
    LayerParameter_LayerType_POOLING;
  static constexpr LayerType POWER =
    LayerParameter_LayerType_POWER;
  static constexpr LayerType RELU =
    LayerParameter_LayerType_RELU;
  static constexpr LayerType SIGMOID =
    LayerParameter_LayerType_SIGMOID;
  static constexpr LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static constexpr LayerType SOFTMAX =
    LayerParameter_LayerType_SOFTMAX;
  static constexpr LayerType SOFTMAX_LOSS =
    LayerParameter_LayerType_SOFTMAX_LOSS;
  static constexpr LayerType SPLIT =
    LayerParameter_LayerType_SPLIT;
  static constexpr LayerType TANH =
    LayerParameter_LayerType_TANH;
  static constexpr LayerType WINDOW_DATA =
    LayerParameter_LayerType_WINDOW_DATA;
  static constexpr LayerType CONVOLUTION3D =
    LayerParameter_LayerType_CONVOLUTION3D;
  static constexpr LayerType POOLING3D =
    LayerParameter_LayerType_POOLING3D;
  static constexpr LayerType VOLUME_DATA =
    LayerParameter_LayerType_VOLUME_DATA;
  static constexpr LayerType VIDEO_DATA =
    LayerParameter_LayerType_VIDEO_DATA;
  static constexpr LayerType DECONVOLUTION3D =
    LayerParameter_LayerType_DECONVOLUTION3D;
  static constexpr LayerType VIDEO_SEGMENTATION_DATA =
    LayerParameter_LayerType_VIDEO_SEGMENTATION_DATA;
  static constexpr LayerType VOXEL_SOFTMAX =
    LayerParameter_LayerType_VOXEL_SOFTMAX;
  static constexpr LayerType VOXEL_SOFTMAX_LOSS =
    LayerParameter_LayerType_VOXEL_SOFTMAX_LOSS;
  static constexpr LayerType VIDEO_WITH_VOXEL_TRUTH_DATA =
    LayerParameter_LayerType_VIDEO_WITH_VOXEL_TRUTH_DATA;
  static constexpr LayerType VOXEL_CUSTOM_LOSS =
    LayerParameter_LayerType_VOXEL_CUSTOM_LOSS;
  static constexpr LayerType DOWN_SAMPLING =
    LayerParameter_LayerType_DOWN_SAMPLING;
  static inline bool LayerType_IsValid(int value) {
    return LayerParameter_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN =
    LayerParameter_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX =
    LayerParameter_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE =
    LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayerType_descriptor() {
    return LayerParameter_LayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerType_Name.");
    return LayerParameter_LayerType_Name(enum_t_value);
  }
  static inline bool LayerType_Parse(const std::string& name,
      LayerType* value) {
    return LayerParameter_LayerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 2,
    kTopFieldNumber = 3,
    kBlobsFieldNumber = 6,
    kBlobsLrFieldNumber = 7,
    kWeightDecayFieldNumber = 8,
    kNameFieldNumber = 4,
    kLayerFieldNumber = 1,
    kConcatParamFieldNumber = 9,
    kConvolutionParamFieldNumber = 10,
    kDataParamFieldNumber = 11,
    kDropoutParamFieldNumber = 12,
    kHdf5DataParamFieldNumber = 13,
    kHdf5OutputParamFieldNumber = 14,
    kImageDataParamFieldNumber = 15,
    kInfogainLossParamFieldNumber = 16,
    kInnerProductParamFieldNumber = 17,
    kLrnParamFieldNumber = 18,
    kPoolingParamFieldNumber = 19,
    kWindowDataParamFieldNumber = 20,
    kPowerParamFieldNumber = 21,
    kMemoryDataParamFieldNumber = 22,
    kDownSamplingParamFieldNumber = 23,
    kTypeFieldNumber = 5,
  };
  // repeated string bottom = 2;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;
  public:
  void clear_bottom();
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bottom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bottom();
  private:
  const std::string& _internal_bottom(int index) const;
  std::string* _internal_add_bottom();
  public:

  // repeated string top = 3;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top();
  private:
  const std::string& _internal_top(int index) const;
  std::string* _internal_add_top();
  public:

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::caffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::caffe::BlobProto& _internal_blobs(int index) const;
  ::caffe::BlobProto* _internal_add_blobs();
  public:
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* release_layer();
  ::caffe::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);
  private:
  const ::caffe::V0LayerParameter& _internal_layer() const;
  ::caffe::V0LayerParameter* _internal_mutable_layer();
  public:

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  private:
  bool _internal_has_concat_param() const;
  public:
  void clear_concat_param();
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* release_concat_param();
  ::caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);
  private:
  const ::caffe::ConcatParameter& _internal_concat_param() const;
  ::caffe::ConcatParameter* _internal_mutable_concat_param();
  public:

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* release_convolution_param();
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);
  private:
  const ::caffe::ConvolutionParameter& _internal_convolution_param() const;
  ::caffe::ConvolutionParameter* _internal_mutable_convolution_param();
  public:

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  private:
  bool _internal_has_data_param() const;
  public:
  void clear_data_param();
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* release_data_param();
  ::caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);
  private:
  const ::caffe::DataParameter& _internal_data_param() const;
  ::caffe::DataParameter* _internal_mutable_data_param();
  public:

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  private:
  bool _internal_has_dropout_param() const;
  public:
  void clear_dropout_param();
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* release_dropout_param();
  ::caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);
  private:
  const ::caffe::DropoutParameter& _internal_dropout_param() const;
  ::caffe::DropoutParameter* _internal_mutable_dropout_param();
  public:

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  private:
  bool _internal_has_hdf5_data_param() const;
  public:
  void clear_hdf5_data_param();
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);
  private:
  const ::caffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::caffe::HDF5DataParameter* _internal_mutable_hdf5_data_param();
  public:

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  private:
  bool _internal_has_image_data_param() const;
  public:
  void clear_image_data_param();
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* release_image_data_param();
  ::caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);
  private:
  const ::caffe::ImageDataParameter& _internal_image_data_param() const;
  ::caffe::ImageDataParameter* _internal_mutable_image_data_param();
  public:

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  private:
  bool _internal_has_infogain_loss_param() const;
  public:
  void clear_infogain_loss_param();
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);
  private:
  const ::caffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::caffe::InfogainLossParameter* _internal_mutable_infogain_loss_param();
  public:

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  private:
  bool _internal_has_inner_product_param() const;
  public:
  void clear_inner_product_param();
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* release_inner_product_param();
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);
  private:
  const ::caffe::InnerProductParameter& _internal_inner_product_param() const;
  ::caffe::InnerProductParameter* _internal_mutable_inner_product_param();
  public:

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  private:
  bool _internal_has_lrn_param() const;
  public:
  void clear_lrn_param();
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* release_lrn_param();
  ::caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);
  private:
  const ::caffe::LRNParameter& _internal_lrn_param() const;
  ::caffe::LRNParameter* _internal_mutable_lrn_param();
  public:

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* release_pooling_param();
  ::caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);
  private:
  const ::caffe::PoolingParameter& _internal_pooling_param() const;
  ::caffe::PoolingParameter* _internal_mutable_pooling_param();
  public:

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  private:
  bool _internal_has_window_data_param() const;
  public:
  void clear_window_data_param();
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* release_window_data_param();
  ::caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);
  private:
  const ::caffe::WindowDataParameter& _internal_window_data_param() const;
  ::caffe::WindowDataParameter* _internal_mutable_window_data_param();
  public:

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  private:
  bool _internal_has_power_param() const;
  public:
  void clear_power_param();
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* release_power_param();
  ::caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);
  private:
  const ::caffe::PowerParameter& _internal_power_param() const;
  ::caffe::PowerParameter* _internal_mutable_power_param();
  public:

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  private:
  bool _internal_has_memory_data_param() const;
  public:
  void clear_memory_data_param();
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* release_memory_data_param();
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);
  private:
  const ::caffe::MemoryDataParameter& _internal_memory_data_param() const;
  ::caffe::MemoryDataParameter* _internal_mutable_memory_data_param();
  public:

  // optional .caffe.DownSamplingParameter down_sampling_param = 23;
  bool has_down_sampling_param() const;
  private:
  bool _internal_has_down_sampling_param() const;
  public:
  void clear_down_sampling_param();
  const ::caffe::DownSamplingParameter& down_sampling_param() const;
  ::caffe::DownSamplingParameter* release_down_sampling_param();
  ::caffe::DownSamplingParameter* mutable_down_sampling_param();
  void set_allocated_down_sampling_param(::caffe::DownSamplingParameter* down_sampling_param);
  private:
  const ::caffe::DownSamplingParameter& _internal_down_sampling_param() const;
  ::caffe::DownSamplingParameter* _internal_mutable_down_sampling_param();
  public:

  // optional .caffe.LayerParameter.LayerType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::caffe::LayerParameter_LayerType type() const;
  void set_type(::caffe::LayerParameter_LayerType value);
  private:
  ::caffe::LayerParameter_LayerType _internal_type() const;
  void _internal_set_type(::caffe::LayerParameter_LayerType value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bottom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::caffe::V0LayerParameter* layer_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::DownSamplingParameter* down_sampling_param_;
  int type_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class ConcatParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const final {
    return CreateMaybeMessage<ConcatParameter>(nullptr);
  }

  ConcatParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.ConcatParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcatDimFieldNumber = 1,
  };
  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim() const;
  void set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_concat_dim() const;
  void _internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class DownSamplingParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.DownSamplingParameter) */ {
 public:
  DownSamplingParameter();
  virtual ~DownSamplingParameter();

  DownSamplingParameter(const DownSamplingParameter& from);
  DownSamplingParameter(DownSamplingParameter&& from) noexcept
    : DownSamplingParameter() {
    *this = ::std::move(from);
  }

  inline DownSamplingParameter& operator=(const DownSamplingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownSamplingParameter& operator=(DownSamplingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownSamplingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownSamplingParameter* internal_default_instance() {
    return reinterpret_cast<const DownSamplingParameter*>(
               &_DownSamplingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DownSamplingParameter& a, DownSamplingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DownSamplingParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownSamplingParameter* New() const final {
    return CreateMaybeMessage<DownSamplingParameter>(nullptr);
  }

  DownSamplingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownSamplingParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownSamplingParameter& from);
  void MergeFrom(const DownSamplingParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownSamplingParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.DownSamplingParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DownSamplingParameter_DownSamplingType DownSamplingType;
  static constexpr DownSamplingType NONE =
    DownSamplingParameter_DownSamplingType_NONE;
  static constexpr DownSamplingType VOTE =
    DownSamplingParameter_DownSamplingType_VOTE;
  static constexpr DownSamplingType AVERAGE =
    DownSamplingParameter_DownSamplingType_AVERAGE;
  static inline bool DownSamplingType_IsValid(int value) {
    return DownSamplingParameter_DownSamplingType_IsValid(value);
  }
  static constexpr DownSamplingType DownSamplingType_MIN =
    DownSamplingParameter_DownSamplingType_DownSamplingType_MIN;
  static constexpr DownSamplingType DownSamplingType_MAX =
    DownSamplingParameter_DownSamplingType_DownSamplingType_MAX;
  static constexpr int DownSamplingType_ARRAYSIZE =
    DownSamplingParameter_DownSamplingType_DownSamplingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DownSamplingType_descriptor() {
    return DownSamplingParameter_DownSamplingType_descriptor();
  }
  template<typename T>
  static inline const std::string& DownSamplingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DownSamplingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DownSamplingType_Name.");
    return DownSamplingParameter_DownSamplingType_Name(enum_t_value);
  }
  static inline bool DownSamplingType_Parse(const std::string& name,
      DownSamplingType* value) {
    return DownSamplingParameter_DownSamplingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialFactorFieldNumber = 2,
    kTemporalFactorFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional int32 spatial_factor = 2;
  bool has_spatial_factor() const;
  private:
  bool _internal_has_spatial_factor() const;
  public:
  void clear_spatial_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 spatial_factor() const;
  void set_spatial_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spatial_factor() const;
  void _internal_set_spatial_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 temporal_factor = 3;
  bool has_temporal_factor() const;
  private:
  bool _internal_has_temporal_factor() const;
  public:
  void clear_temporal_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 temporal_factor() const;
  void set_temporal_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temporal_factor() const;
  void _internal_set_temporal_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .caffe.DownSamplingParameter.DownSamplingType type = 1 [default = VOTE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::caffe::DownSamplingParameter_DownSamplingType type() const;
  void set_type(::caffe::DownSamplingParameter_DownSamplingType value);
  private:
  ::caffe::DownSamplingParameter_DownSamplingType _internal_type() const;
  void _internal_set_type(::caffe::DownSamplingParameter_DownSamplingType value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.DownSamplingParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 spatial_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 temporal_factor_;
  int type_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class ConvolutionParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvolutionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvolutionParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const final {
    return CreateMaybeMessage<ConvolutionParameter>(nullptr);
  }

  ConvolutionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvolutionParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.ConvolutionParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 9,
    kBiasFillerFieldNumber = 10,
    kNumOutputFieldNumber = 1,
    kPadFieldNumber = 3,
    kKernelSizeFieldNumber = 4,
    kKernelDepthFieldNumber = 6,
    kTemporalPadFieldNumber = 12,
    kFilterGroupFieldNumber = 11,
    kBiasTermFieldNumber = 2,
    kGroupFieldNumber = 5,
    kStrideFieldNumber = 7,
    kTemporalStrideFieldNumber = 8,
  };
  // optional .caffe.FillerParameter weight_filler = 9;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  ::caffe::FillerParameter* _internal_mutable_weight_filler();
  public:

  // optional .caffe.FillerParameter bias_filler = 10;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  ::caffe::FillerParameter* _internal_mutable_bias_filler();
  public:

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad = 3 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad() const;
  void set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad() const;
  void _internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_size = 4;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_depth = 6;
  bool has_kernel_depth() const;
  private:
  bool _internal_has_kernel_depth() const;
  public:
  void clear_kernel_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_depth() const;
  void set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_depth() const;
  void _internal_set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 temporal_pad = 12 [default = 0];
  bool has_temporal_pad() const;
  private:
  bool _internal_has_temporal_pad() const;
  public:
  void clear_temporal_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_pad() const;
  void set_temporal_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temporal_pad() const;
  void _internal_set_temporal_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_group = 11 [default = 1];
  bool has_filter_group() const;
  private:
  bool _internal_has_filter_group() const;
  public:
  void clear_filter_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_group() const;
  void set_filter_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_group() const;
  void _internal_set_filter_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride = 7 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 temporal_stride = 8 [default = 1];
  bool has_temporal_stride() const;
  private:
  bool _internal_has_temporal_stride() const;
  public:
  void clear_temporal_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_stride() const;
  void set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temporal_stride() const;
  void _internal_set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_group_;
  bool bias_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_stride_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class DataParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DataParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataParameter* New() const final {
    return CreateMaybeMessage<DataParameter>(nullptr);
  }

  DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.DataParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kMirrorFieldNumber = 6,
    kRandSkipFieldNumber = 7,
    kShowDataFieldNumber = 8,
    kScaleFieldNumber = 2,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 show_data = 8 [default = 0];
  bool has_show_data() const;
  private:
  bool _internal_has_show_data() const;
  public:
  void clear_show_data();
  ::PROTOBUF_NAMESPACE_ID::int32 show_data() const;
  void set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_show_data() const;
  void _internal_set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  bool mirror_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  ::PROTOBUF_NAMESPACE_ID::int32 show_data_;
  float scale_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class DropoutParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropoutParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DropoutParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const final {
    return CreateMaybeMessage<DropoutParameter>(nullptr);
  }

  DropoutParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropoutParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropoutParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.DropoutParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropoutRatioFieldNumber = 1,
  };
  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dropout_ratio_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class HDF5DataParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDF5DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5DataParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const final {
    return CreateMaybeMessage<HDF5DataParameter>(nullptr);
  }

  HDF5DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDF5DataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5DataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.HDF5DataParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class HDF5OutputParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDF5OutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5OutputParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const final {
    return CreateMaybeMessage<HDF5OutputParameter>(nullptr);
  }

  HDF5OutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDF5OutputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5OutputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.HDF5OutputParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class ImageDataParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const final {
    return CreateMaybeMessage<ImageDataParameter>(nullptr);
  }

  ImageDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.ImageDataParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kNewHeightFieldNumber = 9,
    kNewWidthFieldNumber = 10,
    kMirrorFieldNumber = 6,
    kShuffleFieldNumber = 8,
    kUseImageFieldNumber = 13,
    kUseTemporalJitterFieldNumber = 16,
    kNewLengthFieldNumber = 11,
    kShowDataFieldNumber = 12,
    kMeanValueFieldNumber = 17,
    kUseByteInputFieldNumber = 19,
    kIsFlowFieldNumber = 20,
    kClipMinFieldNumber = 22,
    kClipMaxFieldNumber = 23,
    kTruthScaleFieldNumber = 21,
    kScaleFieldNumber = 2,
    kSamplingRateFieldNumber = 14,
    kUseLabelFieldNumber = 15,
    kNumTruthChannelsFieldNumber = 18,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_height() const;
  void set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_height() const;
  void _internal_set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_width() const;
  void set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_width() const;
  void _internal_set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional bool use_image = 13 [default = false];
  bool has_use_image() const;
  private:
  bool _internal_has_use_image() const;
  public:
  void clear_use_image();
  bool use_image() const;
  void set_use_image(bool value);
  private:
  bool _internal_use_image() const;
  void _internal_set_use_image(bool value);
  public:

  // optional bool use_temporal_jitter = 16 [default = false];
  bool has_use_temporal_jitter() const;
  private:
  bool _internal_has_use_temporal_jitter() const;
  public:
  void clear_use_temporal_jitter();
  bool use_temporal_jitter() const;
  void set_use_temporal_jitter(bool value);
  private:
  bool _internal_use_temporal_jitter() const;
  void _internal_set_use_temporal_jitter(bool value);
  public:

  // optional uint32 new_length = 11 [default = 0];
  bool has_new_length() const;
  private:
  bool _internal_has_new_length() const;
  public:
  void clear_new_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_length() const;
  void set_new_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_length() const;
  void _internal_set_new_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 show_data = 12 [default = 0];
  bool has_show_data() const;
  private:
  bool _internal_has_show_data() const;
  public:
  void clear_show_data();
  ::PROTOBUF_NAMESPACE_ID::int32 show_data() const;
  void set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_show_data() const;
  void _internal_set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float mean_value = 17 [default = 0];
  bool has_mean_value() const;
  private:
  bool _internal_has_mean_value() const;
  public:
  void clear_mean_value();
  float mean_value() const;
  void set_mean_value(float value);
  private:
  float _internal_mean_value() const;
  void _internal_set_mean_value(float value);
  public:

  // optional bool use_byte_input = 19 [default = false];
  bool has_use_byte_input() const;
  private:
  bool _internal_has_use_byte_input() const;
  public:
  void clear_use_byte_input();
  bool use_byte_input() const;
  void set_use_byte_input(bool value);
  private:
  bool _internal_use_byte_input() const;
  void _internal_set_use_byte_input(bool value);
  public:

  // optional bool is_flow = 20 [default = false];
  bool has_is_flow() const;
  private:
  bool _internal_has_is_flow() const;
  public:
  void clear_is_flow();
  bool is_flow() const;
  void set_is_flow(bool value);
  private:
  bool _internal_is_flow() const;
  void _internal_set_is_flow(bool value);
  public:

  // optional float clip_min = 22;
  bool has_clip_min() const;
  private:
  bool _internal_has_clip_min() const;
  public:
  void clear_clip_min();
  float clip_min() const;
  void set_clip_min(float value);
  private:
  float _internal_clip_min() const;
  void _internal_set_clip_min(float value);
  public:

  // optional float clip_max = 23;
  bool has_clip_max() const;
  private:
  bool _internal_has_clip_max() const;
  public:
  void clear_clip_max();
  float clip_max() const;
  void set_clip_max(float value);
  private:
  float _internal_clip_max() const;
  void _internal_set_clip_max(float value);
  public:

  // optional float truth_scale = 21 [default = 1];
  bool has_truth_scale() const;
  private:
  bool _internal_has_truth_scale() const;
  public:
  void clear_truth_scale();
  float truth_scale() const;
  void set_truth_scale(float value);
  private:
  float _internal_truth_scale() const;
  void _internal_set_truth_scale(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional int32 sampling_rate = 14 [default = 1];
  bool has_sampling_rate() const;
  private:
  bool _internal_has_sampling_rate() const;
  public:
  void clear_sampling_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_rate() const;
  void set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sampling_rate() const;
  void _internal_set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_label = 15 [default = true];
  bool has_use_label() const;
  private:
  bool _internal_has_use_label() const;
  public:
  void clear_use_label();
  bool use_label() const;
  void set_use_label(bool value);
  private:
  bool _internal_use_label() const;
  void _internal_set_use_label(bool value);
  public:

  // optional uint32 num_truth_channels = 18 [default = 1];
  bool has_num_truth_channels() const;
  private:
  bool _internal_has_num_truth_channels() const;
  public:
  void clear_num_truth_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_truth_channels() const;
  void set_num_truth_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_truth_channels() const;
  void _internal_set_num_truth_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_width_;
  bool mirror_;
  bool shuffle_;
  bool use_image_;
  bool use_temporal_jitter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 show_data_;
  float mean_value_;
  bool use_byte_input_;
  bool is_flow_;
  float clip_min_;
  float clip_max_;
  float truth_scale_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_rate_;
  bool use_label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_truth_channels_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class InfogainLossParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfogainLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InfogainLossParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const final {
    return CreateMaybeMessage<InfogainLossParameter>(nullptr);
  }

  InfogainLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfogainLossParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfogainLossParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.InfogainLossParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class InnerProductParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerProductParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const final {
    return CreateMaybeMessage<InnerProductParameter>(nullptr);
  }

  InnerProductParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InnerProductParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerProductParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.InnerProductParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 4,
    kNumOutputFieldNumber = 1,
    kBiasTermFieldNumber = 2,
  };
  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  ::caffe::FillerParameter* _internal_mutable_weight_filler();
  public:

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  ::caffe::FillerParameter* _internal_mutable_bias_filler();
  public:

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  bool bias_term_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class LRNParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LRNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LRNParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const final {
    return CreateMaybeMessage<LRNParameter>(nullptr);
  }

  LRNParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LRNParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LRNParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.LRNParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static constexpr NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static constexpr NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static constexpr NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static constexpr NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static constexpr int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  template<typename T>
  static inline const std::string& NormRegion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormRegion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormRegion_Name.");
    return LRNParameter_NormRegion_Name(enum_t_value);
  }
  static inline bool NormRegion_Parse(const std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormRegionFieldNumber = 4,
    kBetaFieldNumber = 3,
    kLocalSizeFieldNumber = 1,
    kAlphaFieldNumber = 2,
  };
  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  private:
  bool _internal_has_norm_region() const;
  public:
  void clear_norm_region();
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);
  private:
  ::caffe::LRNParameter_NormRegion _internal_norm_region() const;
  void _internal_set_norm_region(::caffe::LRNParameter_NormRegion value);
  public:

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size() const;
  void set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_size() const;
  void _internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int norm_region_;
  float beta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size_;
  float alpha_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class MemoryDataParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryDataParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const final {
    return CreateMaybeMessage<MemoryDataParameter>(nullptr);
  }

  MemoryDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.MemoryDataParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchSizeFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class PoolingParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolingParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const final {
    return CreateMaybeMessage<PoolingParameter>(nullptr);
  }

  PoolingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolingParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.PoolingParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return PoolingParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(const std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kKernelSizeFieldNumber = 2,
    kPadFieldNumber = 4,
    kKernelDepthFieldNumber = 5,
    kStrideFieldNumber = 3,
    kTemporalStrideFieldNumber = 6,
  };
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);
  private:
  ::caffe::PoolingParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::caffe::PoolingParameter_PoolMethod value);
  public:

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad() const;
  void set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad() const;
  void _internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_depth = 5;
  bool has_kernel_depth() const;
  private:
  bool _internal_has_kernel_depth() const;
  public:
  void clear_kernel_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_depth() const;
  void set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_depth() const;
  void _internal_set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 temporal_stride = 6 [default = 1];
  bool has_temporal_stride() const;
  private:
  bool _internal_has_temporal_stride() const;
  public:
  void clear_temporal_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_stride() const;
  void set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temporal_stride() const;
  void _internal_set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temporal_stride_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class AggregationParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.AggregationParameter) */ {
 public:
  AggregationParameter();
  virtual ~AggregationParameter();

  AggregationParameter(const AggregationParameter& from);
  AggregationParameter(AggregationParameter&& from) noexcept
    : AggregationParameter() {
    *this = ::std::move(from);
  }

  inline AggregationParameter& operator=(const AggregationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregationParameter& operator=(AggregationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregationParameter* internal_default_instance() {
    return reinterpret_cast<const AggregationParameter*>(
               &_AggregationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AggregationParameter& a, AggregationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregationParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregationParameter* New() const final {
    return CreateMaybeMessage<AggregationParameter>(nullptr);
  }

  AggregationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregationParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregationParameter& from);
  void MergeFrom(const AggregationParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregationParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.AggregationParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationParamRFieldNumber = 1,
  };
  // optional float aggregation_param_r = 1 [default = 1];
  bool has_aggregation_param_r() const;
  private:
  bool _internal_has_aggregation_param_r() const;
  public:
  void clear_aggregation_param_r();
  float aggregation_param_r() const;
  void set_aggregation_param_r(float value);
  private:
  float _internal_aggregation_param_r() const;
  void _internal_set_aggregation_param_r(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.AggregationParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float aggregation_param_r_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class PowerParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const final {
    return CreateMaybeMessage<PowerParameter>(nullptr);
  }

  PowerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.PowerParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kPowerFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float power = 1 [default = 1];
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class WindowDataParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowDataParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const final {
    return CreateMaybeMessage<WindowDataParameter>(nullptr);
  }

  WindowDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.WindowDataParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kCropModeFieldNumber = 11,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kMirrorFieldNumber = 6,
    kContextPadFieldNumber = 10,
    kScaleFieldNumber = 2,
    kFgThresholdFieldNumber = 7,
    kBgThresholdFieldNumber = 8,
    kFgFractionFieldNumber = 9,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  private:
  bool _internal_has_crop_mode() const;
  public:
  void clear_crop_mode();
  const std::string& crop_mode() const;
  void set_crop_mode(const std::string& value);
  void set_crop_mode(std::string&& value);
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  std::string* mutable_crop_mode();
  std::string* release_crop_mode();
  void set_allocated_crop_mode(std::string* crop_mode);
  private:
  const std::string& _internal_crop_mode() const;
  void _internal_set_crop_mode(const std::string& value);
  std::string* _internal_mutable_crop_mode();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  private:
  bool _internal_has_context_pad() const;
  public:
  void clear_context_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 context_pad() const;
  void set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_context_pad() const;
  void _internal_set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  private:
  bool _internal_has_fg_threshold() const;
  public:
  void clear_fg_threshold();
  float fg_threshold() const;
  void set_fg_threshold(float value);
  private:
  float _internal_fg_threshold() const;
  void _internal_set_fg_threshold(float value);
  public:

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  private:
  bool _internal_has_bg_threshold() const;
  public:
  void clear_bg_threshold();
  float bg_threshold() const;
  void set_bg_threshold(float value);
  private:
  float _internal_bg_threshold() const;
  void _internal_set_bg_threshold(float value);
  public:

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  private:
  bool _internal_has_fg_fraction() const;
  public:
  void clear_fg_fraction();
  float fg_fraction() const;
  void set_fg_fraction(float value);
  private:
  float _internal_fg_fraction() const;
  void _internal_set_fg_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_crop_mode_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crop_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  bool mirror_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// -------------------------------------------------------------------

class V0LayerParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const V0LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V0LayerParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const final {
    return CreateMaybeMessage<V0LayerParameter>(nullptr);
  }

  V0LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V0LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V0LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe.V0LayerParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_2fproto_2fcaffe_2eproto);
    return ::descriptor_table_caffe_2fproto_2fcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return V0LayerParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(const std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 50,
    kBlobsLrFieldNumber = 51,
    kWeightDecayFieldNumber = 52,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceFieldNumber = 16,
    kMeanfileFieldNumber = 18,
    kDetCropModeFieldNumber = 59,
    kWeightFillerFieldNumber = 5,
    kBiasFillerFieldNumber = 6,
    kHdf5OutputParamFieldNumber = 1001,
    kNumOutputFieldNumber = 3,
    kPadFieldNumber = 7,
    kKernelsizeFieldNumber = 8,
    kPoolFieldNumber = 11,
    kBatchsizeFieldNumber = 19,
    kCropsizeFieldNumber = 20,
    kNewWidthFieldNumber = 63,
    kMirrorFieldNumber = 21,
    kShuffleImagesFieldNumber = 64,
    kRandSkipFieldNumber = 53,
    kDetContextPadFieldNumber = 58,
    kNewNumFieldNumber = 60,
    kNewChannelsFieldNumber = 61,
    kNewHeightFieldNumber = 62,
    kBiastermFieldNumber = 4,
    kGroupFieldNumber = 9,
    kStrideFieldNumber = 10,
    kDropoutRatioFieldNumber = 12,
    kLocalSizeFieldNumber = 13,
    kAlphaFieldNumber = 14,
    kBetaFieldNumber = 15,
    kScaleFieldNumber = 17,
    kDetFgThresholdFieldNumber = 54,
    kDetBgThresholdFieldNumber = 55,
    kDetFgFractionFieldNumber = 56,
    kConcatDimFieldNumber = 65,
  };
  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::caffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::caffe::BlobProto& _internal_blobs(int index) const;
  ::caffe::BlobProto* _internal_add_blobs();
  public:
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string source = 16;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string meanfile = 18;
  bool has_meanfile() const;
  private:
  bool _internal_has_meanfile() const;
  public:
  void clear_meanfile();
  const std::string& meanfile() const;
  void set_meanfile(const std::string& value);
  void set_meanfile(std::string&& value);
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  std::string* mutable_meanfile();
  std::string* release_meanfile();
  void set_allocated_meanfile(std::string* meanfile);
  private:
  const std::string& _internal_meanfile() const;
  void _internal_set_meanfile(const std::string& value);
  std::string* _internal_mutable_meanfile();
  public:

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  private:
  bool _internal_has_det_crop_mode() const;
  public:
  void clear_det_crop_mode();
  const std::string& det_crop_mode() const;
  void set_det_crop_mode(const std::string& value);
  void set_det_crop_mode(std::string&& value);
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  std::string* mutable_det_crop_mode();
  std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(std::string* det_crop_mode);
  private:
  const std::string& _internal_det_crop_mode() const;
  void _internal_set_det_crop_mode(const std::string& value);
  std::string* _internal_mutable_det_crop_mode();
  public:

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  ::caffe::FillerParameter* _internal_mutable_weight_filler();
  public:

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  ::caffe::FillerParameter* _internal_mutable_bias_filler();
  public:

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad() const;
  void set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad() const;
  void _internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  private:
  bool _internal_has_kernelsize() const;
  public:
  void clear_kernelsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernelsize() const;
  void set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernelsize() const;
  void _internal_set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);
  private:
  ::caffe::V0LayerParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::caffe::V0LayerParameter_PoolMethod value);
  public:

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  private:
  bool _internal_has_batchsize() const;
  public:
  void clear_batchsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize() const;
  void set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batchsize() const;
  void _internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  private:
  bool _internal_has_cropsize() const;
  public:
  void clear_cropsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 cropsize() const;
  void set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cropsize() const;
  void _internal_set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  ::PROTOBUF_NAMESPACE_ID::int32 new_width() const;
  void set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_width() const;
  void _internal_set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  private:
  bool _internal_has_shuffle_images() const;
  public:
  void clear_shuffle_images();
  bool shuffle_images() const;
  void set_shuffle_images(bool value);
  private:
  bool _internal_shuffle_images() const;
  void _internal_set_shuffle_images(bool value);
  public:

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  private:
  bool _internal_has_det_context_pad() const;
  public:
  void clear_det_context_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 det_context_pad() const;
  void set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_det_context_pad() const;
  void _internal_set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  private:
  bool _internal_has_new_num() const;
  public:
  void clear_new_num();
  ::PROTOBUF_NAMESPACE_ID::int32 new_num() const;
  void set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_num() const;
  void _internal_set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  private:
  bool _internal_has_new_channels() const;
  public:
  void clear_new_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 new_channels() const;
  void set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_channels() const;
  void _internal_set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  ::PROTOBUF_NAMESPACE_ID::int32 new_height() const;
  void set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_height() const;
  void _internal_set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  private:
  bool _internal_has_biasterm() const;
  public:
  void clear_biasterm();
  bool biasterm() const;
  void set_biasterm(bool value);
  private:
  bool _internal_biasterm() const;
  void _internal_set_biasterm(bool value);
  public:

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size() const;
  void set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_size() const;
  void _internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  private:
  bool _internal_has_det_fg_threshold() const;
  public:
  void clear_det_fg_threshold();
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);
  private:
  float _internal_det_fg_threshold() const;
  void _internal_set_det_fg_threshold(float value);
  public:

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  private:
  bool _internal_has_det_bg_threshold() const;
  public:
  void clear_det_bg_threshold();
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);
  private:
  float _internal_det_bg_threshold() const;
  void _internal_set_det_bg_threshold(float value);
  public:

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  private:
  bool _internal_has_det_fg_fraction() const;
  public:
  void clear_det_fg_fraction();
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);
  private:
  float _internal_det_fg_fraction() const;
  void _internal_set_det_fg_fraction(float value);
  public:

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim() const;
  void set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_concat_dim() const;
  void _internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meanfile_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det_crop_mode_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det_crop_mode_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernelsize_;
  int pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cropsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_width_;
  bool mirror_;
  bool shuffle_images_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 det_context_pad_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_height_;
  bool biasterm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  float dropout_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size_;
  float alpha_;
  float beta_;
  float scale_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim_;
  friend struct ::TableStruct_caffe_2fproto_2fcaffe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobProto

// optional int32 num = 1 [default = 0];
inline bool BlobProto::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlobProto::has_num() const {
  return _internal_has_num();
}
inline void BlobProto::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return _internal_num();
}
inline void BlobProto::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
}
inline void BlobProto::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlobProto::has_channels() const {
  return _internal_has_channels();
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return _internal_channels();
}
inline void BlobProto::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void BlobProto::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 length = 3 [default = 0];
inline bool BlobProto::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlobProto::has_length() const {
  return _internal_has_length();
}
inline void BlobProto::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::length() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.length)
  return _internal_length();
}
inline void BlobProto::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void BlobProto::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.length)
}

// optional int32 height = 4 [default = 0];
inline bool BlobProto::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlobProto::has_height() const {
  return _internal_has_height();
}
inline void BlobProto::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return _internal_height();
}
inline void BlobProto::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void BlobProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 5 [default = 0];
inline bool BlobProto::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlobProto::has_width() const {
  return _internal_has_width();
}
inline void BlobProto::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return _internal_width();
}
inline void BlobProto::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
}
inline void BlobProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// repeated float data = 6 [packed = true];
inline int BlobProto::_internal_data_size() const {
  return data_.size();
}
inline int BlobProto::data_size() const {
  return _internal_data_size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::_internal_data(int index) const {
  return data_.Get(index);
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return _internal_data(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::_internal_add_data(float value) {
  data_.Add(value);
}
inline void BlobProto::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return _internal_mutable_data();
}

// repeated float diff = 7 [packed = true];
inline int BlobProto::_internal_diff_size() const {
  return diff_.size();
}
inline int BlobProto::diff_size() const {
  return _internal_diff_size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::_internal_diff(int index) const {
  return diff_.Get(index);
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return _internal_diff(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::_internal_add_diff(float value) {
  diff_.Add(value);
}
inline void BlobProto::add_diff(float value) {
  _internal_add_diff(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_diff() const {
  return diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return _internal_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_diff() {
  return &diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return _internal_mutable_diff();
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::_internal_blobs_size() const {
  return blobs_.size();
}
inline int BlobProtoVector::blobs_size() const {
  return _internal_blobs_size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& BlobProtoVector::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return _internal_blobs(index);
}
inline ::caffe::BlobProto* BlobProtoVector::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// VolumeDatum

// optional int32 channels = 1;
inline bool VolumeDatum::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VolumeDatum::has_channels() const {
  return _internal_has_channels();
}
inline void VolumeDatum::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.channels)
  return _internal_channels();
}
inline void VolumeDatum::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void VolumeDatum::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.channels)
}

// optional int32 length = 2 [default = 1];
inline bool VolumeDatum::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VolumeDatum::has_length() const {
  return _internal_has_length();
}
inline void VolumeDatum::clear_length() {
  length_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::length() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.length)
  return _internal_length();
}
inline void VolumeDatum::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  length_ = value;
}
inline void VolumeDatum::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.length)
}

// optional int32 height = 3;
inline bool VolumeDatum::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VolumeDatum::has_height() const {
  return _internal_has_height();
}
inline void VolumeDatum::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::height() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.height)
  return _internal_height();
}
inline void VolumeDatum::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void VolumeDatum::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.height)
}

// optional int32 width = 4;
inline bool VolumeDatum::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VolumeDatum::has_width() const {
  return _internal_has_width();
}
inline void VolumeDatum::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::width() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.width)
  return _internal_width();
}
inline void VolumeDatum::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void VolumeDatum::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.width)
}

// optional bytes data = 5;
inline bool VolumeDatum::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VolumeDatum::has_data() const {
  return _internal_has_data();
}
inline void VolumeDatum::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VolumeDatum::data() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.data)
  return _internal_data();
}
inline void VolumeDatum::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.data)
}
inline std::string* VolumeDatum::mutable_data() {
  // @@protoc_insertion_point(field_mutable:caffe.VolumeDatum.data)
  return _internal_mutable_data();
}
inline const std::string& VolumeDatum::_internal_data() const {
  return data_.GetNoArena();
}
inline void VolumeDatum::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VolumeDatum::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.VolumeDatum.data)
}
inline void VolumeDatum::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VolumeDatum.data)
}
inline void VolumeDatum::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VolumeDatum.data)
}
inline std::string* VolumeDatum::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VolumeDatum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.VolumeDatum.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VolumeDatum::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.VolumeDatum.data)
}

// optional int32 label = 6;
inline bool VolumeDatum::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VolumeDatum::has_label() const {
  return _internal_has_label();
}
inline void VolumeDatum::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VolumeDatum::label() const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.label)
  return _internal_label();
}
inline void VolumeDatum::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  label_ = value;
}
inline void VolumeDatum::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.label)
}

// repeated float float_data = 7;
inline int VolumeDatum::_internal_float_data_size() const {
  return float_data_.size();
}
inline int VolumeDatum::float_data_size() const {
  return _internal_float_data_size();
}
inline void VolumeDatum::clear_float_data() {
  float_data_.Clear();
}
inline float VolumeDatum::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float VolumeDatum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.VolumeDatum.float_data)
  return _internal_float_data(index);
}
inline void VolumeDatum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.VolumeDatum.float_data)
}
inline void VolumeDatum::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void VolumeDatum::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:caffe.VolumeDatum.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeDatum::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VolumeDatum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.VolumeDatum.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeDatum::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VolumeDatum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.VolumeDatum.float_data)
  return _internal_mutable_float_data();
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Datum::has_channels() const {
  return _internal_has_channels();
}
inline void Datum::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return _internal_channels();
}
inline void Datum::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void Datum::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Datum::has_height() const {
  return _internal_has_height();
}
inline void Datum::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return _internal_height();
}
inline void Datum::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void Datum::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Datum::has_width() const {
  return _internal_has_width();
}
inline void Datum::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return _internal_width();
}
inline void Datum::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Datum::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Datum::has_data() const {
  return _internal_has_data();
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return _internal_data();
}
inline void Datum::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
inline std::string* Datum::mutable_data() {
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return _internal_mutable_data();
}
inline const std::string& Datum::_internal_data() const {
  return data_.GetNoArena();
}
inline void Datum::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Datum::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline std::string* Datum::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Datum::has_label() const {
  return _internal_has_label();
}
inline void Datum::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return _internal_label();
}
inline void Datum::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  label_ = value;
}
inline void Datum::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::_internal_float_data_size() const {
  return float_data_.size();
}
inline int Datum::float_data_size() const {
  return _internal_float_data_size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return _internal_float_data(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void Datum::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return _internal_mutable_float_data();
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FillerParameter::has_type() const {
  return _internal_has_type();
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return _internal_type();
}
inline void FillerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
inline std::string* FillerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& FillerParameter::_internal_type() const {
  return type_.GetNoArena();
}
inline void FillerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), value);
}
inline void FillerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline std::string* FillerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
}
inline std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void FillerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FillerParameter::has_value() const {
  return _internal_has_value();
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FillerParameter::_internal_value() const {
  return value_;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return _internal_value();
}
inline void FillerParameter::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void FillerParameter::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FillerParameter::has_min() const {
  return _internal_has_min();
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FillerParameter::_internal_min() const {
  return min_;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return _internal_min();
}
inline void FillerParameter::_internal_set_min(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_ = value;
}
inline void FillerParameter::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FillerParameter::has_max() const {
  return _internal_has_max();
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FillerParameter::_internal_max() const {
  return max_;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return _internal_max();
}
inline void FillerParameter::_internal_set_max(float value) {
  _has_bits_[0] |= 0x00000020u;
  max_ = value;
}
inline void FillerParameter::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FillerParameter::has_mean() const {
  return _internal_has_mean();
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FillerParameter::_internal_mean() const {
  return mean_;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return _internal_mean();
}
inline void FillerParameter::_internal_set_mean(float value) {
  _has_bits_[0] |= 0x00000008u;
  mean_ = value;
}
inline void FillerParameter::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::_internal_has_std() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FillerParameter::has_std() const {
  return _internal_has_std();
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FillerParameter::_internal_std() const {
  return std_;
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return _internal_std();
}
inline void FillerParameter::_internal_set_std(float value) {
  _has_bits_[0] |= 0x00000040u;
  std_ = value;
}
inline void FillerParameter::set_std(float value) {
  _internal_set_std(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::_internal_has_sparse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FillerParameter::has_sparse() const {
  return _internal_has_sparse();
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FillerParameter::_internal_sparse() const {
  return sparse_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return _internal_sparse();
}
inline void FillerParameter::_internal_set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sparse_ = value;
}
inline void FillerParameter::set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetParameter::has_name() const {
  return _internal_has_name();
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return _internal_name();
}
inline void NetParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
inline std::string* NetParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return _internal_mutable_name();
}
inline const std::string& NetParameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void NetParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline std::string* NetParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated .caffe.LayerParameter layers = 2;
inline int NetParameter::_internal_layers_size() const {
  return layers_.size();
}
inline int NetParameter::layers_size() const {
  return _internal_layers_size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline ::caffe::LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::caffe::LayerParameter& NetParameter::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::caffe::LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return _internal_layers(index);
}
inline ::caffe::LayerParameter* NetParameter::_internal_add_layers() {
  return layers_.Add();
}
inline ::caffe::LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

// repeated string input = 3;
inline int NetParameter::_internal_input_size() const {
  return input_.size();
}
inline int NetParameter::input_size() const {
  return _internal_input_size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return _internal_add_input();
}
inline const std::string& NetParameter::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return _internal_input(index);
}
inline std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline std::string* NetParameter::_internal_add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
inline void NetParameter::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::_internal_input_dim_size() const {
  return input_dim_.size();
}
inline int NetParameter::input_dim_size() const {
  return _internal_input_dim_size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::_internal_input_dim(int index) const {
  return input_dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return _internal_input_dim(index);
}
inline void NetParameter::set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::_internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Add(value);
}
inline void NetParameter::add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_dim(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameter::_internal_input_dim() const {
  return input_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return _internal_input_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameter::_internal_mutable_input_dim() {
  return &input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return _internal_mutable_input_dim();
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::_internal_has_force_backward() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetParameter::has_force_backward() const {
  return _internal_has_force_backward();
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NetParameter::_internal_force_backward() const {
  return force_backward_;
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return _internal_force_backward();
}
inline void NetParameter::_internal_set_force_backward(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_backward_ = value;
}
inline void NetParameter::set_force_backward(bool value) {
  _internal_set_force_backward(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// -------------------------------------------------------------------

// SolverParameter

// optional string train_net = 1;
inline bool SolverParameter::_internal_has_train_net() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolverParameter::has_train_net() const {
  return _internal_has_train_net();
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return _internal_train_net();
}
inline void SolverParameter::set_train_net(const std::string& value) {
  _internal_set_train_net(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::mutable_train_net() {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return _internal_mutable_train_net();
}
inline const std::string& SolverParameter::_internal_train_net() const {
  return train_net_.GetNoArena();
}
inline void SolverParameter::_internal_set_train_net(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolverParameter::set_train_net(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  train_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::_internal_mutable_train_net() {
  _has_bits_[0] |= 0x00000001u;
  return train_net_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  if (!_internal_has_train_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return train_net_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(std::string* train_net) {
  if (train_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  train_net_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// optional string test_net = 2;
inline bool SolverParameter::_internal_has_test_net() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolverParameter::has_test_net() const {
  return _internal_has_test_net();
}
inline void SolverParameter::clear_test_net() {
  test_net_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return _internal_test_net();
}
inline void SolverParameter::set_test_net(const std::string& value) {
  _internal_set_test_net(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
}
inline std::string* SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return _internal_mutable_test_net();
}
inline const std::string& SolverParameter::_internal_test_net() const {
  return test_net_.GetNoArena();
}
inline void SolverParameter::_internal_set_test_net(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  test_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolverParameter::set_test_net(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  test_net_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  test_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  test_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline std::string* SolverParameter::_internal_mutable_test_net() {
  _has_bits_[0] |= 0x00000002u;
  return test_net_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolverParameter::release_test_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.test_net)
  if (!_internal_has_test_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return test_net_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_test_net(std::string* test_net) {
  if (test_net != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  test_net_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.test_net)
}

// optional int32 test_iter = 3 [default = 0];
inline bool SolverParameter::_internal_has_test_iter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SolverParameter::has_test_iter() const {
  return _internal_has_test_iter();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_test_iter() const {
  return test_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return _internal_test_iter();
}
inline void SolverParameter::_internal_set_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  test_iter_ = value;
}
inline void SolverParameter::set_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_iter(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::_internal_has_test_interval() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SolverParameter::has_test_interval() const {
  return _internal_has_test_interval();
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_test_interval() const {
  return test_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return _internal_test_interval();
}
inline void SolverParameter::_internal_set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  test_interval_ = value;
}
inline void SolverParameter::set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_interval(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::_internal_has_test_compute_loss() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SolverParameter::has_test_compute_loss() const {
  return _internal_has_test_compute_loss();
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SolverParameter::_internal_test_compute_loss() const {
  return test_compute_loss_;
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return _internal_test_compute_loss();
}
inline void SolverParameter::_internal_set_test_compute_loss(bool value) {
  _has_bits_[0] |= 0x00008000u;
  test_compute_loss_ = value;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  _internal_set_test_compute_loss(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional float base_lr = 5;
inline bool SolverParameter::_internal_has_base_lr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SolverParameter::has_base_lr() const {
  return _internal_has_base_lr();
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SolverParameter::_internal_base_lr() const {
  return base_lr_;
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return _internal_base_lr();
}
inline void SolverParameter::_internal_set_base_lr(float value) {
  _has_bits_[0] |= 0x00000040u;
  base_lr_ = value;
}
inline void SolverParameter::set_base_lr(float value) {
  _internal_set_base_lr(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::_internal_has_display() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SolverParameter::has_display() const {
  return _internal_has_display();
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_display() const {
  return display_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return _internal_display();
}
inline void SolverParameter::_internal_set_display(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  display_ = value;
}
inline void SolverParameter::set_display(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::_internal_has_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SolverParameter::has_max_iter() const {
  return _internal_has_max_iter();
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_max_iter() const {
  return max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return _internal_max_iter();
}
inline void SolverParameter::_internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_iter_ = value;
}
inline void SolverParameter::set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional string lr_policy = 8;
inline bool SolverParameter::_internal_has_lr_policy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SolverParameter::has_lr_policy() const {
  return _internal_has_lr_policy();
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return _internal_lr_policy();
}
inline void SolverParameter::set_lr_policy(const std::string& value) {
  _internal_set_lr_policy(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::mutable_lr_policy() {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return _internal_mutable_lr_policy();
}
inline const std::string& SolverParameter::_internal_lr_policy() const {
  return lr_policy_.GetNoArena();
}
inline void SolverParameter::_internal_set_lr_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  lr_policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolverParameter::set_lr_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  lr_policy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  lr_policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  lr_policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::_internal_mutable_lr_policy() {
  _has_bits_[0] |= 0x00000004u;
  return lr_policy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  if (!_internal_has_lr_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return lr_policy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(std::string* lr_policy) {
  if (lr_policy != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lr_policy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SolverParameter::has_gamma() const {
  return _internal_has_gamma();
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SolverParameter::_internal_gamma() const {
  return gamma_;
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return _internal_gamma();
}
inline void SolverParameter::_internal_set_gamma(float value) {
  _has_bits_[0] |= 0x00000200u;
  gamma_ = value;
}
inline void SolverParameter::set_gamma(float value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SolverParameter::has_power() const {
  return _internal_has_power();
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SolverParameter::_internal_power() const {
  return power_;
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return _internal_power();
}
inline void SolverParameter::_internal_set_power(float value) {
  _has_bits_[0] |= 0x00000400u;
  power_ = value;
}
inline void SolverParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::_internal_has_momentum() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SolverParameter::has_momentum() const {
  return _internal_has_momentum();
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float SolverParameter::_internal_momentum() const {
  return momentum_;
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return _internal_momentum();
}
inline void SolverParameter::_internal_set_momentum(float value) {
  _has_bits_[0] |= 0x00000800u;
  momentum_ = value;
}
inline void SolverParameter::set_momentum(float value) {
  _internal_set_momentum(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::_internal_has_weight_decay() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SolverParameter::has_weight_decay() const {
  return _internal_has_weight_decay();
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float SolverParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return _internal_weight_decay();
}
inline void SolverParameter::_internal_set_weight_decay(float value) {
  _has_bits_[0] |= 0x00001000u;
  weight_decay_ = value;
}
inline void SolverParameter::set_weight_decay(float value) {
  _internal_set_weight_decay(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::_internal_has_stepsize() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SolverParameter::has_stepsize() const {
  return _internal_has_stepsize();
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_stepsize() const {
  return stepsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return _internal_stepsize();
}
inline void SolverParameter::_internal_set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  stepsize_ = value;
}
inline void SolverParameter::set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stepsize(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::_internal_has_snapshot() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_snapshot() const {
  return snapshot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return _internal_snapshot();
}
inline void SolverParameter::_internal_set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  snapshot_ = value;
}
inline void SolverParameter::set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_snapshot(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::_internal_has_snapshot_prefix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_prefix() const {
  return _internal_has_snapshot_prefix();
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return _internal_snapshot_prefix();
}
inline void SolverParameter::set_snapshot_prefix(const std::string& value) {
  _internal_set_snapshot_prefix(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::mutable_snapshot_prefix() {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return _internal_mutable_snapshot_prefix();
}
inline const std::string& SolverParameter::_internal_snapshot_prefix() const {
  return snapshot_prefix_.GetNoArena();
}
inline void SolverParameter::_internal_set_snapshot_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  snapshot_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolverParameter::set_snapshot_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  snapshot_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  snapshot_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  snapshot_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::_internal_mutable_snapshot_prefix() {
  _has_bits_[0] |= 0x00000008u;
  return snapshot_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  if (!_internal_has_snapshot_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return snapshot_prefix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(std::string* snapshot_prefix) {
  if (snapshot_prefix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  snapshot_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::_internal_has_snapshot_diff() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_diff() const {
  return _internal_has_snapshot_diff();
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SolverParameter::_internal_snapshot_diff() const {
  return snapshot_diff_;
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return _internal_snapshot_diff();
}
inline void SolverParameter::_internal_set_snapshot_diff(bool value) {
  _has_bits_[0] |= 0x00010000u;
  snapshot_diff_ = value;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  _internal_set_snapshot_diff(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::_internal_has_solver_mode() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SolverParameter::has_solver_mode() const {
  return _internal_has_solver_mode();
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::_internal_solver_mode() const {
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return _internal_solver_mode();
}
inline void SolverParameter::_internal_set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  solver_mode_ = value;
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  _internal_set_solver_mode(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SolverParameter::has_device_id() const {
  return _internal_has_device_id();
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return _internal_device_id();
}
inline void SolverParameter::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  device_id_ = value;
}
inline void SolverParameter::set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::_internal_has_random_seed() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SolverParameter::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SolverParameter::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return _internal_random_seed();
}
inline void SolverParameter::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  random_seed_ = value;
}
inline void SolverParameter::set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::_internal_has_iter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolverState::has_iter() const {
  return _internal_has_iter();
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::_internal_iter() const {
  return iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return _internal_iter();
}
inline void SolverState::_internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  iter_ = value;
}
inline void SolverState::set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iter(value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::_internal_has_learned_net() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolverState::has_learned_net() const {
  return _internal_has_learned_net();
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return _internal_learned_net();
}
inline void SolverState::set_learned_net(const std::string& value) {
  _internal_set_learned_net(value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
inline std::string* SolverState::mutable_learned_net() {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return _internal_mutable_learned_net();
}
inline const std::string& SolverState::_internal_learned_net() const {
  return learned_net_.GetNoArena();
}
inline void SolverState::_internal_set_learned_net(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolverState::set_learned_net(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  learned_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline std::string* SolverState::_internal_mutable_learned_net() {
  _has_bits_[0] |= 0x00000001u;
  return learned_net_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  if (!_internal_has_learned_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return learned_net_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(std::string* learned_net) {
  if (learned_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  learned_net_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::_internal_history_size() const {
  return history_.size();
}
inline int SolverState::history_size() const {
  return _internal_history_size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::caffe::BlobProto& SolverState::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return _internal_history(index);
}
inline ::caffe::BlobProto* SolverState::_internal_add_history() {
  return history_.Add();
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return _internal_add_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// -------------------------------------------------------------------

// LayerParameter

// repeated string bottom = 2;
inline int LayerParameter::_internal_bottom_size() const {
  return bottom_.size();
}
inline int LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return _internal_add_bottom();
}
inline const std::string& LayerParameter::_internal_bottom(int index) const {
  return bottom_.Get(index);
}
inline const std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return _internal_bottom(index);
}
inline std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline std::string* LayerParameter::_internal_add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int LayerParameter::_internal_top_size() const {
  return top_.size();
}
inline int LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return _internal_add_top();
}
inline const std::string& LayerParameter::_internal_top(int index) const {
  return top_.Get(index);
}
inline const std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return _internal_top(index);
}
inline std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline std::string* LayerParameter::_internal_add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return _internal_name();
}
inline void LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
inline std::string* LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& LayerParameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline std::string* LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional .caffe.LayerParameter.LayerType type = 5;
inline bool LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void LayerParameter::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::caffe::LayerParameter_LayerType LayerParameter::_internal_type() const {
  return static_cast< ::caffe::LayerParameter_LayerType >(type_);
}
inline ::caffe::LayerParameter_LayerType LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return _internal_type();
}
inline void LayerParameter::_internal_set_type(::caffe::LayerParameter_LayerType value) {
  assert(::caffe::LayerParameter_LayerType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  type_ = value;
}
inline void LayerParameter::set_type(::caffe::LayerParameter_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int LayerParameter::_internal_blobs_size() const {
  return blobs_.size();
}
inline int LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& LayerParameter::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::caffe::BlobProto* LayerParameter::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 7;
inline int LayerParameter::_internal_blobs_lr_size() const {
  return blobs_lr_.size();
}
inline int LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float LayerParameter::_internal_blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline float LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.blobs_lr)
}
inline void LayerParameter::_internal_add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline void LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::_internal_blobs_lr() const {
  return blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::_internal_mutable_blobs_lr() {
  return &blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 8;
inline int LayerParameter::_internal_weight_decay_size() const {
  return weight_decay_.size();
}
inline int LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float LayerParameter::_internal_weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline float LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.weight_decay)
}
inline void LayerParameter::_internal_add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline void LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::_internal_mutable_weight_decay() {
  return &weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool LayerParameter::_internal_has_concat_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || concat_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_concat_param() const {
  return _internal_has_concat_param();
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != nullptr) concat_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::caffe::ConcatParameter& LayerParameter::_internal_concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return _internal_concat_param();
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  _has_bits_[0] &= ~0x00000004u;
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = nullptr;
  return temp;
}
inline ::caffe::ConcatParameter* LayerParameter::_internal_mutable_concat_param() {
  _has_bits_[0] |= 0x00000004u;
  if (concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::ConcatParameter>(GetArenaNoVirtual());
    concat_param_ = p;
  }
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return _internal_mutable_concat_param();
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete concat_param_;
  }
  if (concat_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concat_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool LayerParameter::_internal_has_convolution_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || convolution_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != nullptr) convolution_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::caffe::ConvolutionParameter& LayerParameter::_internal_convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  _has_bits_[0] &= ~0x00000008u;
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = nullptr;
  return temp;
}
inline ::caffe::ConvolutionParameter* LayerParameter::_internal_mutable_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
  if (convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::ConvolutionParameter>(GetArenaNoVirtual());
    convolution_param_ = p;
  }
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return _internal_mutable_convolution_param();
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool LayerParameter::_internal_has_data_param() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_data_param() const {
  return _internal_has_data_param();
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != nullptr) data_param_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::caffe::DataParameter& LayerParameter::_internal_data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return _internal_data_param();
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  _has_bits_[0] &= ~0x00000010u;
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = nullptr;
  return temp;
}
inline ::caffe::DataParameter* LayerParameter::_internal_mutable_data_param() {
  _has_bits_[0] |= 0x00000010u;
  if (data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::DataParameter>(GetArenaNoVirtual());
    data_param_ = p;
  }
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return _internal_mutable_data_param();
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_param_;
  }
  if (data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool LayerParameter::_internal_has_dropout_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dropout_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dropout_param() const {
  return _internal_has_dropout_param();
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != nullptr) dropout_param_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::caffe::DropoutParameter& LayerParameter::_internal_dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  _has_bits_[0] &= ~0x00000020u;
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = nullptr;
  return temp;
}
inline ::caffe::DropoutParameter* LayerParameter::_internal_mutable_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
  if (dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::DropoutParameter>(GetArenaNoVirtual());
    dropout_param_ = p;
  }
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return _internal_mutable_dropout_param();
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dropout_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool LayerParameter::_internal_has_hdf5_data_param() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_data_param() const {
  return _internal_has_hdf5_data_param();
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != nullptr) hdf5_data_param_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::caffe::HDF5DataParameter& LayerParameter::_internal_hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  _has_bits_[0] &= ~0x00000040u;
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = nullptr;
  return temp;
}
inline ::caffe::HDF5DataParameter* LayerParameter::_internal_mutable_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
  if (hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::HDF5DataParameter>(GetArenaNoVirtual());
    hdf5_data_param_ = p;
  }
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return _internal_mutable_hdf5_data_param();
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != nullptr) hdf5_output_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::_internal_hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  _has_bits_[0] &= ~0x00000080u;
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = nullptr;
  return temp;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::_internal_mutable_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
  if (hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::HDF5OutputParameter>(GetArenaNoVirtual());
    hdf5_output_param_ = p;
  }
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return _internal_mutable_hdf5_output_param();
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool LayerParameter::_internal_has_image_data_param() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || image_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_image_data_param() const {
  return _internal_has_image_data_param();
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != nullptr) image_data_param_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::caffe::ImageDataParameter& LayerParameter::_internal_image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  _has_bits_[0] &= ~0x00000100u;
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = nullptr;
  return temp;
}
inline ::caffe::ImageDataParameter* LayerParameter::_internal_mutable_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
  if (image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::ImageDataParameter>(GetArenaNoVirtual());
    image_data_param_ = p;
  }
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return _internal_mutable_image_data_param();
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool LayerParameter::_internal_has_infogain_loss_param() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || infogain_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_infogain_loss_param() const {
  return _internal_has_infogain_loss_param();
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != nullptr) infogain_loss_param_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::caffe::InfogainLossParameter& LayerParameter::_internal_infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  _has_bits_[0] &= ~0x00000200u;
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = nullptr;
  return temp;
}
inline ::caffe::InfogainLossParameter* LayerParameter::_internal_mutable_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
  if (infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::InfogainLossParameter>(GetArenaNoVirtual());
    infogain_loss_param_ = p;
  }
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return _internal_mutable_infogain_loss_param();
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool LayerParameter::_internal_has_inner_product_param() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || inner_product_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_inner_product_param() const {
  return _internal_has_inner_product_param();
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != nullptr) inner_product_param_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::caffe::InnerProductParameter& LayerParameter::_internal_inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  _has_bits_[0] &= ~0x00000400u;
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = nullptr;
  return temp;
}
inline ::caffe::InnerProductParameter* LayerParameter::_internal_mutable_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
  if (inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::InnerProductParameter>(GetArenaNoVirtual());
    inner_product_param_ = p;
  }
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return _internal_mutable_inner_product_param();
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inner_product_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool LayerParameter::_internal_has_lrn_param() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || lrn_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_lrn_param() const {
  return _internal_has_lrn_param();
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != nullptr) lrn_param_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::caffe::LRNParameter& LayerParameter::_internal_lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  _has_bits_[0] &= ~0x00000800u;
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = nullptr;
  return temp;
}
inline ::caffe::LRNParameter* LayerParameter::_internal_mutable_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
  if (lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::LRNParameter>(GetArenaNoVirtual());
    lrn_param_ = p;
  }
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return _internal_mutable_lrn_param();
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lrn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool LayerParameter::_internal_has_memory_data_param() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || memory_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_memory_data_param() const {
  return _internal_has_memory_data_param();
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != nullptr) memory_data_param_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::caffe::MemoryDataParameter& LayerParameter::_internal_memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  _has_bits_[0] &= ~0x00008000u;
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = nullptr;
  return temp;
}
inline ::caffe::MemoryDataParameter* LayerParameter::_internal_mutable_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
  if (memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::MemoryDataParameter>(GetArenaNoVirtual());
    memory_data_param_ = p;
  }
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return _internal_mutable_memory_data_param();
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool LayerParameter::_internal_has_pooling_param() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != nullptr) pooling_param_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::caffe::PoolingParameter& LayerParameter::_internal_pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  _has_bits_[0] &= ~0x00001000u;
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = nullptr;
  return temp;
}
inline ::caffe::PoolingParameter* LayerParameter::_internal_mutable_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
  if (pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::PoolingParameter>(GetArenaNoVirtual());
    pooling_param_ = p;
  }
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return _internal_mutable_pooling_param();
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool LayerParameter::_internal_has_power_param() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || power_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_power_param() const {
  return _internal_has_power_param();
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != nullptr) power_param_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::caffe::PowerParameter& LayerParameter::_internal_power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return _internal_power_param();
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  _has_bits_[0] &= ~0x00004000u;
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = nullptr;
  return temp;
}
inline ::caffe::PowerParameter* LayerParameter::_internal_mutable_power_param() {
  _has_bits_[0] |= 0x00004000u;
  if (power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::PowerParameter>(GetArenaNoVirtual());
    power_param_ = p;
  }
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return _internal_mutable_power_param();
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete power_param_;
  }
  if (power_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool LayerParameter::_internal_has_window_data_param() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || window_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_window_data_param() const {
  return _internal_has_window_data_param();
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != nullptr) window_data_param_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::caffe::WindowDataParameter& LayerParameter::_internal_window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  _has_bits_[0] &= ~0x00002000u;
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = nullptr;
  return temp;
}
inline ::caffe::WindowDataParameter* LayerParameter::_internal_mutable_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
  if (window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::WindowDataParameter>(GetArenaNoVirtual());
    window_data_param_ = p;
  }
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return _internal_mutable_window_data_param();
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.DownSamplingParameter down_sampling_param = 23;
inline bool LayerParameter::_internal_has_down_sampling_param() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || down_sampling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_down_sampling_param() const {
  return _internal_has_down_sampling_param();
}
inline void LayerParameter::clear_down_sampling_param() {
  if (down_sampling_param_ != nullptr) down_sampling_param_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::caffe::DownSamplingParameter& LayerParameter::_internal_down_sampling_param() const {
  const ::caffe::DownSamplingParameter* p = down_sampling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::DownSamplingParameter*>(
      &::caffe::_DownSamplingParameter_default_instance_);
}
inline const ::caffe::DownSamplingParameter& LayerParameter::down_sampling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.down_sampling_param)
  return _internal_down_sampling_param();
}
inline ::caffe::DownSamplingParameter* LayerParameter::release_down_sampling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.down_sampling_param)
  _has_bits_[0] &= ~0x00010000u;
  ::caffe::DownSamplingParameter* temp = down_sampling_param_;
  down_sampling_param_ = nullptr;
  return temp;
}
inline ::caffe::DownSamplingParameter* LayerParameter::_internal_mutable_down_sampling_param() {
  _has_bits_[0] |= 0x00010000u;
  if (down_sampling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::DownSamplingParameter>(GetArenaNoVirtual());
    down_sampling_param_ = p;
  }
  return down_sampling_param_;
}
inline ::caffe::DownSamplingParameter* LayerParameter::mutable_down_sampling_param() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.down_sampling_param)
  return _internal_mutable_down_sampling_param();
}
inline void LayerParameter::set_allocated_down_sampling_param(::caffe::DownSamplingParameter* down_sampling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete down_sampling_param_;
  }
  if (down_sampling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      down_sampling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, down_sampling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  down_sampling_param_ = down_sampling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.down_sampling_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool LayerParameter::_internal_has_layer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || layer_ != nullptr);
  return value;
}
inline bool LayerParameter::has_layer() const {
  return _internal_has_layer();
}
inline void LayerParameter::clear_layer() {
  if (layer_ != nullptr) layer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe::V0LayerParameter& LayerParameter::_internal_layer() const {
  const ::caffe::V0LayerParameter* p = layer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::V0LayerParameter*>(
      &::caffe::_V0LayerParameter_default_instance_);
}
inline const ::caffe::V0LayerParameter& LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.layer)
  return _internal_layer();
}
inline ::caffe::V0LayerParameter* LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.layer)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = nullptr;
  return temp;
}
inline ::caffe::V0LayerParameter* LayerParameter::_internal_mutable_layer() {
  _has_bits_[0] |= 0x00000002u;
  if (layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::V0LayerParameter>(GetArenaNoVirtual());
    layer_ = p;
  }
  return layer_;
}
inline ::caffe::V0LayerParameter* LayerParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.layer)
  return _internal_mutable_layer();
}
inline void LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layer_;
  }
  if (layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.layer)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::_internal_has_concat_dim() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcatParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConcatParameter::_internal_concat_dim() const {
  return concat_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return _internal_concat_dim();
}
inline void ConcatParameter::_internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  concat_dim_ = value;
}
inline void ConcatParameter::set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// DownSamplingParameter

// optional .caffe.DownSamplingParameter.DownSamplingType type = 1 [default = VOTE];
inline bool DownSamplingParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DownSamplingParameter::has_type() const {
  return _internal_has_type();
}
inline void DownSamplingParameter::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::caffe::DownSamplingParameter_DownSamplingType DownSamplingParameter::_internal_type() const {
  return static_cast< ::caffe::DownSamplingParameter_DownSamplingType >(type_);
}
inline ::caffe::DownSamplingParameter_DownSamplingType DownSamplingParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.DownSamplingParameter.type)
  return _internal_type();
}
inline void DownSamplingParameter::_internal_set_type(::caffe::DownSamplingParameter_DownSamplingType value) {
  assert(::caffe::DownSamplingParameter_DownSamplingType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void DownSamplingParameter::set_type(::caffe::DownSamplingParameter_DownSamplingType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe.DownSamplingParameter.type)
}

// optional int32 spatial_factor = 2;
inline bool DownSamplingParameter::_internal_has_spatial_factor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DownSamplingParameter::has_spatial_factor() const {
  return _internal_has_spatial_factor();
}
inline void DownSamplingParameter::clear_spatial_factor() {
  spatial_factor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownSamplingParameter::_internal_spatial_factor() const {
  return spatial_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownSamplingParameter::spatial_factor() const {
  // @@protoc_insertion_point(field_get:caffe.DownSamplingParameter.spatial_factor)
  return _internal_spatial_factor();
}
inline void DownSamplingParameter::_internal_set_spatial_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  spatial_factor_ = value;
}
inline void DownSamplingParameter::set_spatial_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spatial_factor(value);
  // @@protoc_insertion_point(field_set:caffe.DownSamplingParameter.spatial_factor)
}

// optional int32 temporal_factor = 3;
inline bool DownSamplingParameter::_internal_has_temporal_factor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DownSamplingParameter::has_temporal_factor() const {
  return _internal_has_temporal_factor();
}
inline void DownSamplingParameter::clear_temporal_factor() {
  temporal_factor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownSamplingParameter::_internal_temporal_factor() const {
  return temporal_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownSamplingParameter::temporal_factor() const {
  // @@protoc_insertion_point(field_get:caffe.DownSamplingParameter.temporal_factor)
  return _internal_temporal_factor();
}
inline void DownSamplingParameter::_internal_set_temporal_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  temporal_factor_ = value;
}
inline void DownSamplingParameter::set_temporal_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temporal_factor(value);
  // @@protoc_insertion_point(field_set:caffe.DownSamplingParameter.temporal_factor)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return _internal_num_output();
}
inline void ConvolutionParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_output_ = value;
}
inline void ConvolutionParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ConvolutionParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return _internal_bias_term();
}
inline void ConvolutionParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00000100u;
  bias_term_ = value;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
inline bool ConvolutionParameter::_internal_has_pad() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_pad() const {
  return _internal_has_pad();
}
inline void ConvolutionParameter::clear_pad() {
  pad_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_pad() const {
  return pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return _internal_pad();
}
inline void ConvolutionParameter::_internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  pad_ = value;
}
inline void ConvolutionParameter::set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}

// optional uint32 kernel_size = 4;
inline bool ConvolutionParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return _internal_kernel_size();
}
inline void ConvolutionParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  kernel_size_ = value;
}
inline void ConvolutionParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_group() const {
  return _internal_has_group();
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return _internal_group();
}
inline void ConvolutionParameter::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  group_ = value;
}
inline void ConvolutionParameter::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional uint32 kernel_depth = 6;
inline bool ConvolutionParameter::_internal_has_kernel_depth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_depth() const {
  return _internal_has_kernel_depth();
}
inline void ConvolutionParameter::clear_kernel_depth() {
  kernel_depth_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_kernel_depth() const {
  return kernel_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::kernel_depth() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_depth)
  return _internal_kernel_depth();
}
inline void ConvolutionParameter::_internal_set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  kernel_depth_ = value;
}
inline void ConvolutionParameter::set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_depth(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_depth)
}

// optional uint32 stride = 7 [default = 1];
inline bool ConvolutionParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_stride() const {
  return _internal_has_stride();
}
inline void ConvolutionParameter::clear_stride() {
  stride_ = 1u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return _internal_stride();
}
inline void ConvolutionParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  stride_ = value;
}
inline void ConvolutionParameter::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}

// optional uint32 temporal_stride = 8 [default = 1];
inline bool ConvolutionParameter::_internal_has_temporal_stride() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_temporal_stride() const {
  return _internal_has_temporal_stride();
}
inline void ConvolutionParameter::clear_temporal_stride() {
  temporal_stride_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_temporal_stride() const {
  return temporal_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::temporal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.temporal_stride)
  return _internal_temporal_stride();
}
inline void ConvolutionParameter::_internal_set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  temporal_stride_ = value;
}
inline void ConvolutionParameter::set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temporal_stride(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.temporal_stride)
}

// optional .caffe.FillerParameter weight_filler = 9;
inline bool ConvolutionParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::caffe::FillerParameter& ConvolutionParameter::_internal_weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return _internal_weight_filler();
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 10;
inline bool ConvolutionParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe::FillerParameter& ConvolutionParameter::_internal_bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return _internal_bias_filler();
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional uint32 filter_group = 11 [default = 1];
inline bool ConvolutionParameter::_internal_has_filter_group() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_filter_group() const {
  return _internal_has_filter_group();
}
inline void ConvolutionParameter::clear_filter_group() {
  filter_group_ = 1u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_filter_group() const {
  return filter_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::filter_group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.filter_group)
  return _internal_filter_group();
}
inline void ConvolutionParameter::_internal_set_filter_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  filter_group_ = value;
}
inline void ConvolutionParameter::set_filter_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_group(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.filter_group)
}

// optional uint32 temporal_pad = 12 [default = 0];
inline bool ConvolutionParameter::_internal_has_temporal_pad() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_temporal_pad() const {
  return _internal_has_temporal_pad();
}
inline void ConvolutionParameter::clear_temporal_pad() {
  temporal_pad_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_temporal_pad() const {
  return temporal_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::temporal_pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.temporal_pad)
  return _internal_temporal_pad();
}
inline void ConvolutionParameter::_internal_set_temporal_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  temporal_pad_ = value;
}
inline void ConvolutionParameter::set_temporal_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temporal_pad(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.temporal_pad)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataParameter::has_source() const {
  return _internal_has_source();
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return _internal_source();
}
inline void DataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
inline std::string* DataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& DataParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void DataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline std::string* DataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float DataParameter::_internal_scale() const {
  return scale_;
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return _internal_scale();
}
inline void DataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  scale_ = value;
}
inline void DataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return _internal_mean_file();
}
inline void DataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
inline std::string* DataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& DataParameter::_internal_mean_file() const {
  return mean_file_.GetNoArena();
}
inline void DataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline std::string* DataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return _internal_batch_size();
}
inline void DataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batch_size_ = value;
}
inline void DataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return _internal_crop_size();
}
inline void DataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crop_size_ = value;
}
inline void DataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return _internal_mirror();
}
inline void DataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mirror_ = value;
}
inline void DataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void DataParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rand_skip_ = value;
}
inline void DataParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional int32 show_data = 8 [default = 0];
inline bool DataParameter::_internal_has_show_data() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataParameter::has_show_data() const {
  return _internal_has_show_data();
}
inline void DataParameter::clear_show_data() {
  show_data_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataParameter::_internal_show_data() const {
  return show_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataParameter::show_data() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.show_data)
  return _internal_show_data();
}
inline void DataParameter::_internal_set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  show_data_ = value;
}
inline void DataParameter::set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_show_data(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.show_data)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::_internal_has_dropout_ratio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropoutParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DropoutParameter::_internal_dropout_ratio() const {
  return dropout_ratio_;
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void DropoutParameter::_internal_set_dropout_ratio(float value) {
  _has_bits_[0] |= 0x00000001u;
  dropout_ratio_ = value;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_source() const {
  return _internal_has_source();
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return _internal_source();
}
inline void HDF5DataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& HDF5DataParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void HDF5DataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HDF5DataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HDF5DataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return _internal_batch_size();
}
inline void HDF5DataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  batch_size_ = value;
}
inline void HDF5DataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5OutputParameter::has_file_name() const {
  return _internal_has_file_name();
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return _internal_file_name();
}
inline void HDF5OutputParameter::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& HDF5OutputParameter::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void HDF5OutputParameter::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HDF5OutputParameter::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageDataParameter::has_source() const {
  return _internal_has_source();
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return _internal_source();
}
inline void ImageDataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& ImageDataParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void ImageDataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageDataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline float ImageDataParameter::_internal_scale() const {
  return scale_;
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return _internal_scale();
}
inline void ImageDataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00080000u;
  scale_ = value;
}
inline void ImageDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return _internal_mean_file();
}
inline void ImageDataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& ImageDataParameter::_internal_mean_file() const {
  return mean_file_.GetNoArena();
}
inline void ImageDataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageDataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool ImageDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return _internal_batch_size();
}
inline void ImageDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batch_size_ = value;
}
inline void ImageDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return _internal_crop_size();
}
inline void ImageDataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crop_size_ = value;
}
inline void ImageDataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ImageDataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return _internal_mirror();
}
inline void ImageDataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000080u;
  mirror_ = value;
}
inline void ImageDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageDataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void ImageDataParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rand_skip_ = value;
}
inline void ImageDataParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ImageDataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ImageDataParameter::_internal_shuffle() const {
  return shuffle_;
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return _internal_shuffle();
}
inline void ImageDataParameter::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000100u;
  shuffle_ = value;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::_internal_has_new_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_new_height() const {
  return new_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return _internal_new_height();
}
inline void ImageDataParameter::_internal_set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  new_height_ = value;
}
inline void ImageDataParameter::set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::_internal_has_new_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_new_width() const {
  return new_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return _internal_new_width();
}
inline void ImageDataParameter::_internal_set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  new_width_ = value;
}
inline void ImageDataParameter::set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional uint32 new_length = 11 [default = 0];
inline bool ImageDataParameter::_internal_has_new_length() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_length() const {
  return _internal_has_new_length();
}
inline void ImageDataParameter::clear_new_length() {
  new_length_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_new_length() const {
  return new_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::new_length() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_length)
  return _internal_new_length();
}
inline void ImageDataParameter::_internal_set_new_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  new_length_ = value;
}
inline void ImageDataParameter::set_new_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_length(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_length)
}

// optional int32 show_data = 12 [default = 0];
inline bool ImageDataParameter::_internal_has_show_data() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_show_data() const {
  return _internal_has_show_data();
}
inline void ImageDataParameter::clear_show_data() {
  show_data_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageDataParameter::_internal_show_data() const {
  return show_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageDataParameter::show_data() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.show_data)
  return _internal_show_data();
}
inline void ImageDataParameter::_internal_set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  show_data_ = value;
}
inline void ImageDataParameter::set_show_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_show_data(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.show_data)
}

// optional bool use_image = 13 [default = false];
inline bool ImageDataParameter::_internal_has_use_image() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ImageDataParameter::has_use_image() const {
  return _internal_has_use_image();
}
inline void ImageDataParameter::clear_use_image() {
  use_image_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ImageDataParameter::_internal_use_image() const {
  return use_image_;
}
inline bool ImageDataParameter::use_image() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.use_image)
  return _internal_use_image();
}
inline void ImageDataParameter::_internal_set_use_image(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_image_ = value;
}
inline void ImageDataParameter::set_use_image(bool value) {
  _internal_set_use_image(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.use_image)
}

// optional int32 sampling_rate = 14 [default = 1];
inline bool ImageDataParameter::_internal_has_sampling_rate() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_sampling_rate() const {
  return _internal_has_sampling_rate();
}
inline void ImageDataParameter::clear_sampling_rate() {
  sampling_rate_ = 1;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageDataParameter::_internal_sampling_rate() const {
  return sampling_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageDataParameter::sampling_rate() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.sampling_rate)
  return _internal_sampling_rate();
}
inline void ImageDataParameter::_internal_set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  sampling_rate_ = value;
}
inline void ImageDataParameter::set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sampling_rate(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.sampling_rate)
}

// optional bool use_label = 15 [default = true];
inline bool ImageDataParameter::_internal_has_use_label() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_use_label() const {
  return _internal_has_use_label();
}
inline void ImageDataParameter::clear_use_label() {
  use_label_ = true;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ImageDataParameter::_internal_use_label() const {
  return use_label_;
}
inline bool ImageDataParameter::use_label() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.use_label)
  return _internal_use_label();
}
inline void ImageDataParameter::_internal_set_use_label(bool value) {
  _has_bits_[0] |= 0x00200000u;
  use_label_ = value;
}
inline void ImageDataParameter::set_use_label(bool value) {
  _internal_set_use_label(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.use_label)
}

// optional bool use_temporal_jitter = 16 [default = false];
inline bool ImageDataParameter::_internal_has_use_temporal_jitter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ImageDataParameter::has_use_temporal_jitter() const {
  return _internal_has_use_temporal_jitter();
}
inline void ImageDataParameter::clear_use_temporal_jitter() {
  use_temporal_jitter_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ImageDataParameter::_internal_use_temporal_jitter() const {
  return use_temporal_jitter_;
}
inline bool ImageDataParameter::use_temporal_jitter() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.use_temporal_jitter)
  return _internal_use_temporal_jitter();
}
inline void ImageDataParameter::_internal_set_use_temporal_jitter(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_temporal_jitter_ = value;
}
inline void ImageDataParameter::set_use_temporal_jitter(bool value) {
  _internal_set_use_temporal_jitter(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.use_temporal_jitter)
}

// optional float mean_value = 17 [default = 0];
inline bool ImageDataParameter::_internal_has_mean_value() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mean_value() const {
  return _internal_has_mean_value();
}
inline void ImageDataParameter::clear_mean_value() {
  mean_value_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ImageDataParameter::_internal_mean_value() const {
  return mean_value_;
}
inline float ImageDataParameter::mean_value() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_value)
  return _internal_mean_value();
}
inline void ImageDataParameter::_internal_set_mean_value(float value) {
  _has_bits_[0] |= 0x00002000u;
  mean_value_ = value;
}
inline void ImageDataParameter::set_mean_value(float value) {
  _internal_set_mean_value(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_value)
}

// optional uint32 num_truth_channels = 18 [default = 1];
inline bool ImageDataParameter::_internal_has_num_truth_channels() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_num_truth_channels() const {
  return _internal_has_num_truth_channels();
}
inline void ImageDataParameter::clear_num_truth_channels() {
  num_truth_channels_ = 1u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_num_truth_channels() const {
  return num_truth_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::num_truth_channels() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.num_truth_channels)
  return _internal_num_truth_channels();
}
inline void ImageDataParameter::_internal_set_num_truth_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  num_truth_channels_ = value;
}
inline void ImageDataParameter::set_num_truth_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_truth_channels(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.num_truth_channels)
}

// optional bool use_byte_input = 19 [default = false];
inline bool ImageDataParameter::_internal_has_use_byte_input() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_use_byte_input() const {
  return _internal_has_use_byte_input();
}
inline void ImageDataParameter::clear_use_byte_input() {
  use_byte_input_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ImageDataParameter::_internal_use_byte_input() const {
  return use_byte_input_;
}
inline bool ImageDataParameter::use_byte_input() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.use_byte_input)
  return _internal_use_byte_input();
}
inline void ImageDataParameter::_internal_set_use_byte_input(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_byte_input_ = value;
}
inline void ImageDataParameter::set_use_byte_input(bool value) {
  _internal_set_use_byte_input(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.use_byte_input)
}

// optional bool is_flow = 20 [default = false];
inline bool ImageDataParameter::_internal_has_is_flow() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_is_flow() const {
  return _internal_has_is_flow();
}
inline void ImageDataParameter::clear_is_flow() {
  is_flow_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ImageDataParameter::_internal_is_flow() const {
  return is_flow_;
}
inline bool ImageDataParameter::is_flow() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_flow)
  return _internal_is_flow();
}
inline void ImageDataParameter::_internal_set_is_flow(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_flow_ = value;
}
inline void ImageDataParameter::set_is_flow(bool value) {
  _internal_set_is_flow(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_flow)
}

// optional float truth_scale = 21 [default = 1];
inline bool ImageDataParameter::_internal_has_truth_scale() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_truth_scale() const {
  return _internal_has_truth_scale();
}
inline void ImageDataParameter::clear_truth_scale() {
  truth_scale_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ImageDataParameter::_internal_truth_scale() const {
  return truth_scale_;
}
inline float ImageDataParameter::truth_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.truth_scale)
  return _internal_truth_scale();
}
inline void ImageDataParameter::_internal_set_truth_scale(float value) {
  _has_bits_[0] |= 0x00040000u;
  truth_scale_ = value;
}
inline void ImageDataParameter::set_truth_scale(float value) {
  _internal_set_truth_scale(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.truth_scale)
}

// optional float clip_min = 22;
inline bool ImageDataParameter::_internal_has_clip_min() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_clip_min() const {
  return _internal_has_clip_min();
}
inline void ImageDataParameter::clear_clip_min() {
  clip_min_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ImageDataParameter::_internal_clip_min() const {
  return clip_min_;
}
inline float ImageDataParameter::clip_min() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.clip_min)
  return _internal_clip_min();
}
inline void ImageDataParameter::_internal_set_clip_min(float value) {
  _has_bits_[0] |= 0x00010000u;
  clip_min_ = value;
}
inline void ImageDataParameter::set_clip_min(float value) {
  _internal_set_clip_min(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.clip_min)
}

// optional float clip_max = 23;
inline bool ImageDataParameter::_internal_has_clip_max() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_clip_max() const {
  return _internal_has_clip_max();
}
inline void ImageDataParameter::clear_clip_max() {
  clip_max_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ImageDataParameter::_internal_clip_max() const {
  return clip_max_;
}
inline float ImageDataParameter::clip_max() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.clip_max)
  return _internal_clip_max();
}
inline void ImageDataParameter::_internal_set_clip_max(float value) {
  _has_bits_[0] |= 0x00020000u;
  clip_max_ = value;
}
inline void ImageDataParameter::set_clip_max(float value) {
  _internal_set_clip_max(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.clip_max)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfogainLossParameter::has_source() const {
  return _internal_has_source();
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return _internal_source();
}
inline void InfogainLossParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return _internal_mutable_source();
}
inline const std::string& InfogainLossParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void InfogainLossParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InfogainLossParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InnerProductParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InnerProductParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return _internal_num_output();
}
inline void InnerProductParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_output_ = value;
}
inline void InnerProductParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InnerProductParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InnerProductParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return _internal_bias_term();
}
inline void InnerProductParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bias_term_ = value;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::caffe::FillerParameter& InnerProductParameter::_internal_weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return _internal_weight_filler();
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe::FillerParameter& InnerProductParameter::_internal_bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return _internal_bias_filler();
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::_internal_has_local_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LRNParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LRNParameter::_internal_local_size() const {
  return local_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return _internal_local_size();
}
inline void LRNParameter::_internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  local_size_ = value;
}
inline void LRNParameter::set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LRNParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LRNParameter::_internal_alpha() const {
  return alpha_;
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return _internal_alpha();
}
inline void LRNParameter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000008u;
  alpha_ = value;
}
inline void LRNParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LRNParameter::has_beta() const {
  return _internal_has_beta();
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LRNParameter::_internal_beta() const {
  return beta_;
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return _internal_beta();
}
inline void LRNParameter::_internal_set_beta(float value) {
  _has_bits_[0] |= 0x00000002u;
  beta_ = value;
}
inline void LRNParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::_internal_has_norm_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LRNParameter::has_norm_region() const {
  return _internal_has_norm_region();
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::_internal_norm_region() const {
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return _internal_norm_region();
}
inline void LRNParameter::_internal_set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  norm_region_ = value;
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  _internal_set_norm_region(value);
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return _internal_batch_size();
}
inline void MemoryDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  batch_size_ = value;
}
inline void MemoryDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_channels() const {
  return _internal_has_channels();
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return _internal_channels();
}
inline void MemoryDataParameter::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void MemoryDataParameter::set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_height() const {
  return _internal_has_height();
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return _internal_height();
}
inline void MemoryDataParameter::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void MemoryDataParameter::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_width() const {
  return _internal_has_width();
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return _internal_width();
}
inline void MemoryDataParameter::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void MemoryDataParameter::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolingParameter::has_pool() const {
  return _internal_has_pool();
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::_internal_pool() const {
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return _internal_pool();
}
inline void PoolingParameter::_internal_set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pool_ = value;
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return _internal_kernel_size();
}
inline void PoolingParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kernel_size_ = value;
}
inline void PoolingParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride() const {
  return _internal_has_stride();
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return _internal_stride();
}
inline void PoolingParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  stride_ = value;
}
inline void PoolingParameter::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::_internal_has_pad() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad() const {
  return _internal_has_pad();
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_pad() const {
  return pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return _internal_pad();
}
inline void PoolingParameter::_internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pad_ = value;
}
inline void PoolingParameter::set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 kernel_depth = 5;
inline bool PoolingParameter::_internal_has_kernel_depth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_depth() const {
  return _internal_has_kernel_depth();
}
inline void PoolingParameter::clear_kernel_depth() {
  kernel_depth_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_kernel_depth() const {
  return kernel_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::kernel_depth() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_depth)
  return _internal_kernel_depth();
}
inline void PoolingParameter::_internal_set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  kernel_depth_ = value;
}
inline void PoolingParameter::set_kernel_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_depth(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_depth)
}

// optional uint32 temporal_stride = 6 [default = 1];
inline bool PoolingParameter::_internal_has_temporal_stride() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PoolingParameter::has_temporal_stride() const {
  return _internal_has_temporal_stride();
}
inline void PoolingParameter::clear_temporal_stride() {
  temporal_stride_ = 1u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_temporal_stride() const {
  return temporal_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::temporal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.temporal_stride)
  return _internal_temporal_stride();
}
inline void PoolingParameter::_internal_set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  temporal_stride_ = value;
}
inline void PoolingParameter::set_temporal_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temporal_stride(value);
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.temporal_stride)
}

// -------------------------------------------------------------------

// AggregationParameter

// optional float aggregation_param_r = 1 [default = 1];
inline bool AggregationParameter::_internal_has_aggregation_param_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AggregationParameter::has_aggregation_param_r() const {
  return _internal_has_aggregation_param_r();
}
inline void AggregationParameter::clear_aggregation_param_r() {
  aggregation_param_r_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AggregationParameter::_internal_aggregation_param_r() const {
  return aggregation_param_r_;
}
inline float AggregationParameter::aggregation_param_r() const {
  // @@protoc_insertion_point(field_get:caffe.AggregationParameter.aggregation_param_r)
  return _internal_aggregation_param_r();
}
inline void AggregationParameter::_internal_set_aggregation_param_r(float value) {
  _has_bits_[0] |= 0x00000001u;
  aggregation_param_r_ = value;
}
inline void AggregationParameter::set_aggregation_param_r(float value) {
  _internal_set_aggregation_param_r(value);
  // @@protoc_insertion_point(field_set:caffe.AggregationParameter.aggregation_param_r)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PowerParameter::has_power() const {
  return _internal_has_power();
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PowerParameter::_internal_power() const {
  return power_;
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return _internal_power();
}
inline void PowerParameter::_internal_set_power(float value) {
  _has_bits_[0] |= 0x00000002u;
  power_ = value;
}
inline void PowerParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PowerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PowerParameter::_internal_scale() const {
  return scale_;
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return _internal_scale();
}
inline void PowerParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  scale_ = value;
}
inline void PowerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::_internal_has_shift() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerParameter::has_shift() const {
  return _internal_has_shift();
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PowerParameter::_internal_shift() const {
  return shift_;
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return _internal_shift();
}
inline void PowerParameter::_internal_set_shift(float value) {
  _has_bits_[0] |= 0x00000001u;
  shift_ = value;
}
inline void PowerParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowDataParameter::has_source() const {
  return _internal_has_source();
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return _internal_source();
}
inline void WindowDataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& WindowDataParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void WindowDataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WindowDataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WindowDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float WindowDataParameter::_internal_scale() const {
  return scale_;
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return _internal_scale();
}
inline void WindowDataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  scale_ = value;
}
inline void WindowDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return _internal_mean_file();
}
inline void WindowDataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& WindowDataParameter::_internal_mean_file() const {
  return mean_file_.GetNoArena();
}
inline void WindowDataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WindowDataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WindowDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return _internal_batch_size();
}
inline void WindowDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  batch_size_ = value;
}
inline void WindowDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return _internal_crop_size();
}
inline void WindowDataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  crop_size_ = value;
}
inline void WindowDataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool WindowDataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return _internal_mirror();
}
inline void WindowDataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mirror_ = value;
}
inline void WindowDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::_internal_has_fg_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_threshold() const {
  return _internal_has_fg_threshold();
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float WindowDataParameter::_internal_fg_threshold() const {
  return fg_threshold_;
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return _internal_fg_threshold();
}
inline void WindowDataParameter::_internal_set_fg_threshold(float value) {
  _has_bits_[0] |= 0x00000100u;
  fg_threshold_ = value;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  _internal_set_fg_threshold(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::_internal_has_bg_threshold() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WindowDataParameter::has_bg_threshold() const {
  return _internal_has_bg_threshold();
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float WindowDataParameter::_internal_bg_threshold() const {
  return bg_threshold_;
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return _internal_bg_threshold();
}
inline void WindowDataParameter::_internal_set_bg_threshold(float value) {
  _has_bits_[0] |= 0x00000200u;
  bg_threshold_ = value;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  _internal_set_bg_threshold(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::_internal_has_fg_fraction() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_fraction() const {
  return _internal_has_fg_fraction();
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float WindowDataParameter::_internal_fg_fraction() const {
  return fg_fraction_;
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return _internal_fg_fraction();
}
inline void WindowDataParameter::_internal_set_fg_fraction(float value) {
  _has_bits_[0] |= 0x00000400u;
  fg_fraction_ = value;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  _internal_set_fg_fraction(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::_internal_has_context_pad() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WindowDataParameter::has_context_pad() const {
  return _internal_has_context_pad();
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_context_pad() const {
  return context_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return _internal_context_pad();
}
inline void WindowDataParameter::_internal_set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  context_pad_ = value;
}
inline void WindowDataParameter::set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_context_pad(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::_internal_has_crop_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_mode() const {
  return _internal_has_crop_mode();
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return _internal_crop_mode();
}
inline void WindowDataParameter::set_crop_mode(const std::string& value) {
  _internal_set_crop_mode(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::mutable_crop_mode() {
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return _internal_mutable_crop_mode();
}
inline const std::string& WindowDataParameter::_internal_crop_mode() const {
  return crop_mode_.GetNoArena();
}
inline void WindowDataParameter::_internal_set_crop_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), value);
}
inline void WindowDataParameter::set_crop_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.SetNoArena(
    &::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::_internal_mutable_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
  return crop_mode_.MutableNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
}
inline std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  if (!_internal_has_crop_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return crop_mode_.ReleaseNonDefaultNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
}
inline void WindowDataParameter::set_allocated_crop_mode(std::string* crop_mode) {
  if (crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  crop_mode_.SetAllocatedNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return _internal_name();
}
inline void V0LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& V0LayerParameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void V0LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void V0LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return _internal_type();
}
inline void V0LayerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& V0LayerParameter::_internal_type() const {
  return type_.GetNoArena();
}
inline void V0LayerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void V0LayerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool V0LayerParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return _internal_num_output();
}
inline void V0LayerParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_output_ = value;
}
inline void V0LayerParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::_internal_has_biasterm() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_biasterm() const {
  return _internal_has_biasterm();
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool V0LayerParameter::_internal_biasterm() const {
  return biasterm_;
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return _internal_biasterm();
}
inline void V0LayerParameter::_internal_set_biasterm(bool value) {
  _has_bits_[0] |= 0x00400000u;
  biasterm_ = value;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  _internal_set_biasterm(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::caffe::FillerParameter& V0LayerParameter::_internal_weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return _internal_weight_filler();
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  _has_bits_[0] &= ~0x00000020u;
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::caffe::FillerParameter& V0LayerParameter::_internal_bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return _internal_bias_filler();
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  _has_bits_[0] &= ~0x00000040u;
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::_internal_has_pad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pad() const {
  return _internal_has_pad();
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_pad() const {
  return pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return _internal_pad();
}
inline void V0LayerParameter::_internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  pad_ = value;
}
inline void V0LayerParameter::set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::_internal_has_kernelsize() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool V0LayerParameter::has_kernelsize() const {
  return _internal_has_kernelsize();
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_kernelsize() const {
  return kernelsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return _internal_kernelsize();
}
inline void V0LayerParameter::_internal_set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  kernelsize_ = value;
}
inline void V0LayerParameter::set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernelsize(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_group() const {
  return _internal_has_group();
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return _internal_group();
}
inline void V0LayerParameter::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  group_ = value;
}
inline void V0LayerParameter::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_stride() const {
  return _internal_has_stride();
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return _internal_stride();
}
inline void V0LayerParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  stride_ = value;
}
inline void V0LayerParameter::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pool() const {
  return _internal_has_pool();
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::_internal_pool() const {
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return _internal_pool();
}
inline void V0LayerParameter::_internal_set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  pool_ = value;
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::_internal_has_dropout_ratio() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  _has_bits_[0] &= ~0x02000000u;
}
inline float V0LayerParameter::_internal_dropout_ratio() const {
  return dropout_ratio_;
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void V0LayerParameter::_internal_set_dropout_ratio(float value) {
  _has_bits_[0] |= 0x02000000u;
  dropout_ratio_ = value;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::_internal_has_local_size() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_local_size() const {
  return local_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return _internal_local_size();
}
inline void V0LayerParameter::_internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  local_size_ = value;
}
inline void V0LayerParameter::set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x08000000u;
}
inline float V0LayerParameter::_internal_alpha() const {
  return alpha_;
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return _internal_alpha();
}
inline void V0LayerParameter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x08000000u;
  alpha_ = value;
}
inline void V0LayerParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_beta() const {
  return _internal_has_beta();
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  _has_bits_[0] &= ~0x10000000u;
}
inline float V0LayerParameter::_internal_beta() const {
  return beta_;
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return _internal_beta();
}
inline void V0LayerParameter::_internal_set_beta(float value) {
  _has_bits_[0] |= 0x10000000u;
  beta_ = value;
}
inline void V0LayerParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional string source = 16;
inline bool V0LayerParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool V0LayerParameter::has_source() const {
  return _internal_has_source();
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return _internal_source();
}
inline void V0LayerParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return _internal_mutable_source();
}
inline const std::string& V0LayerParameter::_internal_source() const {
  return source_.GetNoArena();
}
inline void V0LayerParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void V0LayerParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x20000000u;
}
inline float V0LayerParameter::_internal_scale() const {
  return scale_;
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return _internal_scale();
}
inline void V0LayerParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x20000000u;
  scale_ = value;
}
inline void V0LayerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::_internal_has_meanfile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool V0LayerParameter::has_meanfile() const {
  return _internal_has_meanfile();
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return _internal_meanfile();
}
inline void V0LayerParameter::set_meanfile(const std::string& value) {
  _internal_set_meanfile(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::mutable_meanfile() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return _internal_mutable_meanfile();
}
inline const std::string& V0LayerParameter::_internal_meanfile() const {
  return meanfile_.GetNoArena();
}
inline void V0LayerParameter::_internal_set_meanfile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void V0LayerParameter::set_meanfile(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  meanfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::_internal_mutable_meanfile() {
  _has_bits_[0] |= 0x00000008u;
  return meanfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  if (!_internal_has_meanfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return meanfile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(std::string* meanfile) {
  if (meanfile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  meanfile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::_internal_has_batchsize() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_batchsize() const {
  return _internal_has_batchsize();
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_batchsize() const {
  return batchsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return _internal_batchsize();
}
inline void V0LayerParameter::_internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  batchsize_ = value;
}
inline void V0LayerParameter::set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::_internal_has_cropsize() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_cropsize() const {
  return _internal_has_cropsize();
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_cropsize() const {
  return cropsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return _internal_cropsize();
}
inline void V0LayerParameter::_internal_set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cropsize_ = value;
}
inline void V0LayerParameter::set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cropsize(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool V0LayerParameter::_internal_mirror() const {
  return mirror_;
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return _internal_mirror();
}
inline void V0LayerParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00008000u;
  mirror_ = value;
}
inline void V0LayerParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::_internal_blobs_size() const {
  return blobs_.size();
}
inline int V0LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& V0LayerParameter::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::caffe::BlobProto* V0LayerParameter::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::_internal_blobs_lr_size() const {
  return blobs_lr_.size();
}
inline int V0LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::_internal_blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::_internal_add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_blobs_lr() const {
  return blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_blobs_lr() {
  return &blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::_internal_weight_decay_size() const {
  return weight_decay_.size();
}
inline int V0LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::_internal_weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::_internal_add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline void V0LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_weight_decay() {
  return &weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return _internal_rand_skip();
}
inline void V0LayerParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  rand_skip_ = value;
}
inline void V0LayerParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_fg_threshold() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return _internal_has_det_fg_threshold();
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x40000000u;
}
inline float V0LayerParameter::_internal_det_fg_threshold() const {
  return det_fg_threshold_;
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return _internal_det_fg_threshold();
}
inline void V0LayerParameter::_internal_set_det_fg_threshold(float value) {
  _has_bits_[0] |= 0x40000000u;
  det_fg_threshold_ = value;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  _internal_set_det_fg_threshold(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_bg_threshold() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return _internal_has_det_bg_threshold();
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x80000000u;
}
inline float V0LayerParameter::_internal_det_bg_threshold() const {
  return det_bg_threshold_;
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return _internal_det_bg_threshold();
}
inline void V0LayerParameter::_internal_set_det_bg_threshold(float value) {
  _has_bits_[0] |= 0x80000000u;
  det_bg_threshold_ = value;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  _internal_set_det_bg_threshold(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::_internal_has_det_fg_fraction() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return _internal_has_det_fg_fraction();
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  _has_bits_[1] &= ~0x00000001u;
}
inline float V0LayerParameter::_internal_det_fg_fraction() const {
  return det_fg_fraction_;
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return _internal_det_fg_fraction();
}
inline void V0LayerParameter::_internal_set_det_fg_fraction(float value) {
  _has_bits_[1] |= 0x00000001u;
  det_fg_fraction_ = value;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  _internal_set_det_fg_fraction(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::_internal_has_det_context_pad() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_context_pad() const {
  return _internal_has_det_context_pad();
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_det_context_pad() const {
  return det_context_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return _internal_det_context_pad();
}
inline void V0LayerParameter::_internal_set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  det_context_pad_ = value;
}
inline void V0LayerParameter::set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_det_context_pad(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::_internal_has_det_crop_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_crop_mode() const {
  return _internal_has_det_crop_mode();
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return _internal_det_crop_mode();
}
inline void V0LayerParameter::set_det_crop_mode(const std::string& value) {
  _internal_set_det_crop_mode(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::mutable_det_crop_mode() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return _internal_mutable_det_crop_mode();
}
inline const std::string& V0LayerParameter::_internal_det_crop_mode() const {
  return det_crop_mode_.GetNoArena();
}
inline void V0LayerParameter::_internal_set_det_crop_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), value);
}
inline void V0LayerParameter::set_det_crop_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.SetNoArena(
    &::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::_internal_mutable_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
  return det_crop_mode_.MutableNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
}
inline std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  if (!_internal_has_det_crop_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return det_crop_mode_.ReleaseNonDefaultNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
}
inline void V0LayerParameter::set_allocated_det_crop_mode(std::string* det_crop_mode) {
  if (det_crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  det_crop_mode_.SetAllocatedNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::_internal_has_new_num() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_num() const {
  return _internal_has_new_num();
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_num() const {
  return new_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return _internal_new_num();
}
inline void V0LayerParameter::_internal_set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  new_num_ = value;
}
inline void V0LayerParameter::set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_num(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::_internal_has_new_channels() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_channels() const {
  return _internal_has_new_channels();
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_channels() const {
  return new_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return _internal_new_channels();
}
inline void V0LayerParameter::_internal_set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  new_channels_ = value;
}
inline void V0LayerParameter::set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_channels(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::_internal_has_new_height() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_height() const {
  return new_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return _internal_new_height();
}
inline void V0LayerParameter::_internal_set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  new_height_ = value;
}
inline void V0LayerParameter::set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::_internal_has_new_width() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_width() const {
  return new_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return _internal_new_width();
}
inline void V0LayerParameter::_internal_set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  new_width_ = value;
}
inline void V0LayerParameter::set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::_internal_has_shuffle_images() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_shuffle_images() const {
  return _internal_has_shuffle_images();
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool V0LayerParameter::_internal_shuffle_images() const {
  return shuffle_images_;
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return _internal_shuffle_images();
}
inline void V0LayerParameter::_internal_set_shuffle_images(bool value) {
  _has_bits_[0] |= 0x00010000u;
  shuffle_images_ = value;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  _internal_set_shuffle_images(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::_internal_has_concat_dim() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_concat_dim() const {
  return concat_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return _internal_concat_dim();
}
inline void V0LayerParameter::_internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  concat_dim_ = value;
}
inline void V0LayerParameter::set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_output_param_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != nullptr) hdf5_output_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::_internal_hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  _has_bits_[0] &= ~0x00000080u;
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = nullptr;
  return temp;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::_internal_mutable_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
  if (hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe::HDF5OutputParameter>(GetArenaNoVirtual());
    hdf5_output_param_ = p;
  }
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return _internal_mutable_hdf5_output_param();
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::LayerParameter_LayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LayerParameter_LayerType>() {
  return ::caffe::LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DownSamplingParameter_DownSamplingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DownSamplingParameter_DownSamplingType>() {
  return ::caffe::DownSamplingParameter_DownSamplingType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_caffe_2fproto_2fcaffe_2eproto
